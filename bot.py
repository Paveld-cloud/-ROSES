import os
import json
import logging
import telebot
from flask import Flask, request
from google.oauth2.service_account import Credentials
import gspread
import datetime
import urllib.parse

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
CREDS_JSON = json.loads(os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON"))

bot = telebot.TeleBot(BOT_TOKEN)

# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets ---
creds = Credentials.from_service_account_info(
    CREDS_JSON,
    scopes=["https://www.googleapis.com/auth/spreadsheets"]
)
gs = gspread.authorize(creds)
spreadsheet = gs.open_by_url(SPREADSHEET_URL)
sheet = spreadsheet.worksheet("List1")
users_sheet = spreadsheet.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")

# --- –ö—ç—à —Ä–æ–∑ ---
cached_roses = []
def refresh_cached_roses():
    global cached_roses
    try:
        cached_roses = sheet.get_all_records()
        logger.info("‚úÖ –ö—ç—à —Ä–æ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–æ–∑: {e}")
        cached_roses = []
refresh_cached_roses()

# --- Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
app = Flask(__name__)
WEBHOOK_URL = "https://" + os.getenv("RAILWAY_PUBLIC_DOMAIN")
try:
    bot.remove_webhook()
    bot.set_webhook(url=f"{WEBHOOK_URL}/telegram")
    logger.info(f"üåê Webhook –∞–∫—Ç–∏–≤–µ–Ω: {WEBHOOK_URL}/telegram")
except Exception as e:
    logger.error(f"‚ùå Webhook –æ—à–∏–±–∫–∞: {e}")

@app.route('/')
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/telegram', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "", 200

# --- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ ---
def normalize(text):
    if not text:
        return ""
    text = text.lower()
    for sym in ['—Ä–æ–∑–∞', 'rose', '"', '¬´', '¬ª', '(', ')', '\n', '\r', '-', '‚Äì', '.', ',', '‚Äî']:
        text = text.replace(sym, ' ')
    text = ' '.join(text.split())
    return text.strip()

# --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–æ—Å ---
def save_user(message, query=None):
    try:
        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        users_sheet.append_row([
            str(message.from_user.id),
            message.from_user.first_name,
            message.from_user.username or "",
            now,
            query or ""
        ])
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π "–°—Ç–∞—Ä—Ç" ---
def send_main_menu(chat_id, text):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üîé –ü–æ–∏—Å–∫")
    markup.row("üìû –°–≤—è–∑–∞—Ç—å—Å—è", "üì¶ –ó–∞–∫–∞–∑–∞—Ç—å")
    bot.send_message(
        chat_id,
        text,
        parse_mode='HTML',
        reply_markup=markup
    )

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    send_main_menu(message.chat.id, "üåπ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    save_user(message)

@bot.message_handler(func=lambda m: m.text == "üîé –ü–æ–∏—Å–∫")
def handle_search(message):
    bot.reply_to(message, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã")

@bot.message_handler(func=lambda m: m.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è")
def handle_contact(message):
    bot.reply_to(message, "üì¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @your_username")

@bot.message_handler(func=lambda m: m.text == "üì¶ –ó–∞–∫–∞–∑–∞—Ç—å")
def handle_order(message):
    bot.reply_to(message, "üõç –ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ —Å–æ—Ä—Ç–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç")

# --- –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–ø–æ —á–∞—Å—Ç—è–º, –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è) ---
@bot.message_handler(func=lambda m: m.text and m.text not in ["üîé –ü–æ–∏—Å–∫", "üìû –°–≤—è–∑–∞—Ç—å—Å—è", "üì¶ –ó–∞–∫–∞–∑–∞—Ç—å"])
def find_rose_by_name(message):
    query = normalize(message.text)
    save_user(message, query)

    matches = []
    for r in cached_roses:
        name_norm = normalize(r.get('–ù–∞–∑–≤–∞–Ω–∏–µ', ''))
        # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º —Å–ª–æ–≤–∞–º –∑–∞–ø—Ä–æ—Å–∞, –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–æ —á–∞—Å—Ç—è–º)
        if all(word in name_norm for word in query.split()):
            matches.append(r)

    if not matches:
        send_main_menu(message.chat.id, "‚ùå –†–æ–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n–ù–∞–∂–º–∏—Ç–µ '–°—Ç–∞—Ä—Ç' –¥–ª—è –º–µ–Ω—é.")
        return

    for rose in matches:
        caption = (
            f"üåπ <b>{rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
            f"{rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '')}\n"
            f"–¶–µ–Ω–∞: {rose.get('price', '?')}"
        )
        photo_url = rose.get("photo", "").split(",")[0].strip() if rose.get("photo", "") else None
        rose_name_encoded = urllib.parse.quote_plus(rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', ''))

        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(
            telebot.types.InlineKeyboardButton("ü™¥ –£—Ö–æ–¥", callback_data=f"care_{rose_name_encoded}"),
            telebot.types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history_{rose_name_encoded}")
        )
        if photo_url:
            bot.send_photo(message.chat.id, photo_url, caption=caption, parse_mode='HTML', reply_markup=keyboard)
        else:
            bot.send_message(message.chat.id, caption, parse_mode='HTML', reply_markup=keyboard)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–£—Ö–æ–¥" –∏ "–ò—Å—Ç–æ—Ä–∏—è" ---
@bot.callback_query_handler(func=lambda call: call.data.startswith(("care_", "history_")))
def handle_details(call):
    action, name_enc = call.data.split("_", 1)
    rose_name = urllib.parse.unquote_plus(name_enc)
    rose = next((r for r in cached_roses if normalize(rose_name) in normalize(r.get('–ù–∞–∑–≤–∞–Ω–∏–µ', ''))), None)
    if not rose:
        bot.answer_callback_query(call.id, "–†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    text = rose.get("–£—Ö–æ–¥" if action == "care" else "–ò—Å—Ç–æ—Ä–∏—è", "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    prefix = "ü™¥ –£—Ö–æ–¥:\n" if action == "care" else "üìú –ò—Å—Ç–æ—Ä–∏—è:\n"
    bot.send_message(call.message.chat.id, prefix + text)
    bot.answer_callback_query(call.id)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))
