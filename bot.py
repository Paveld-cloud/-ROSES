import os
import logging
import telebot
import gspread
import urllib.parse
from flask import Flask, request
from google.oauth2.service_account import Credentials
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
creds_json = os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
creds = Credentials.from_service_account_info(eval(creds_json))
client = gspread.authorize(creds)
spreadsheet = client.open_by_url(SPREADSHEET_URL)
worksheet = spreadsheet.worksheet("–õ–∏—Å—Ç1")
data = worksheet.get_all_records()

# Flask –∏ Telegram Webhook
app = Flask(__name__)
bot = telebot.TeleBot(BOT_TOKEN)
rose_cache = data  # –ö—ç—à

# üîç –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
def normalize(text):
    if not text:
        return ""
    text = text.lower().strip()
    for ch in '¬´¬ª"()':
        text = text.replace(ch, "")
    return text.replace("—Ä–æ–∑–∞", "").strip()

# üìå –ü–æ–∏—Å–∫ —Ä–æ–∑
def search_rose(query):
    query_norm = normalize(query)
    for rose in rose_cache:
        title_norm = normalize(rose.get("–ù–∞–∑–≤–∞–Ω–∏–µ", ""))
        if query_norm in title_norm:
            return rose
    return None

# üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    text = message.text.strip()
    rose = search_rose(text)

    if not rose:
        bot.send_message(message.chat.id, "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    caption = f"<b>{rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n\n"
    caption += f"{rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '').strip()}\n"
    caption += f"\n–¶–µ–Ω–∞: {rose.get('G', '?')}"  # –°—Ç–æ–ª–±–µ—Ü G –ø–æ–¥ —Ü–µ–Ω–æ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)

    # –ö–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup()
    name_encoded = urllib.parse.quote_plus(rose.get("–ù–∞–∑–≤–∞–Ω–∏–µ", ""))
    keyboard.row(
        InlineKeyboardButton("ü™¥ –£—Ö–æ–¥", callback_data=f"care_{name_encoded}"),
        InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history_{name_encoded}")
    )

    photo_url = rose.get("photo", "").strip()
    if photo_url:
        bot.send_photo(message.chat.id, photo_url, caption=caption, parse_mode="HTML", reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, caption, parse_mode="HTML", reply_markup=keyboard)

# üîò –ö–Ω–æ–ø–∫–∏: –£—Ö–æ–¥ –∏ –ò—Å—Ç–æ—Ä–∏—è
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    data = call.data
    if data.startswith("care_") or data.startswith("history_"):
        _, encoded = data.split("_", 1)
        rose_name = urllib.parse.unquote_plus(encoded)
        rose = search_rose(rose_name)

        if not rose:
            bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        if data.startswith("care_"):
            response = rose.get("–£—Ö–æ–¥", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —É—Ö–æ–¥—É.")
        else:
            response = rose.get("–ò—Å—Ç–æ—Ä–∏—è", "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.")

        bot.send_message(call.message.chat.id, response)

# üåê Webhook
@app.route('/telegram', methods=['POST'])
def telegram_webhook():
    bot.process_new_updates([telebot.types.Update.de_json(request.data.decode("utf-8"))])
    return "OK"

@app.route("/")
def index():
    return "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
bot.remove_webhook()
bot.set_webhook(url="https://roses-production.up.railway.app/telegram")
logger.info("üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# üèÅ –ó–∞–ø—É—Å–∫ Flask
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)
