import os
import json
import logging
import telebot
from flask import Flask, request
from google.oauth2.service_account import Credentials
import gspread
import time
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
CREDS_JSON = json.loads(os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON"))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
creds = Credentials.from_service_account_info(
    CREDS_JSON,
    scopes=["https://www.googleapis.com/auth/spreadsheets"]
)
gs = gspread.authorize(creds)
spreadsheet = gs.open_by_url(SPREADSHEET_URL)
sheet = spreadsheet.sheet1
users_sheet = spreadsheet.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")  # <-- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

# –ö—ç—à —Ä–æ–∑
cached_roses = []

def refresh_cached_roses():
    global cached_roses
    try:
        cached_roses = sheet.get_all_records()
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        cached_roses = []

refresh_cached_roses()

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# Webhook
WEBHOOK_URL = "https://" + os.getenv("RAILWAY_PUBLIC_DOMAIN")
bot.remove_webhook()
bot.set_webhook(url=f"{WEBHOOK_URL}/telegram")

@app.route('/')
def index():
    return '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'

@app.route('/telegram', methods=['POST'])
def telegram_webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
    bot.process_new_updates([update])
    return '', 200

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===

@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    full_name = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()
    date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    try:
        users_sheet.append_row([str(user_id), full_name, username, date])
        logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} - {full_name}")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üîé –ü–æ–∏—Å–∫", "üìû –°–≤—è–∑–∞—Ç—å—Å—è")
    markup.row("üì¶ –ó–∞–∫–∞–∑–∞—Ç—å")
    bot.send_animation(message.chat.id, "https://media.giphy.com/media/26AHONQ79FdWZhAI0/giphy.gif")
    bot.send_message(
        message.chat.id,
        "üåπ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='HTML',
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == "üîé –ü–æ–∏—Å–∫")
def search_request(message):
    bot.send_message(message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã")

@bot.message_handler(func=lambda m: m.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è")
def contact_info(message):
    bot.send_message(message.chat.id, "üì¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @your_username")

@bot.message_handler(func=lambda m: m.text == "üì¶ –ó–∞–∫–∞–∑–∞—Ç—å")
def order_info(message):
    bot.send_message(message.chat.id, "üõí –ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ —Å–æ—Ä—Ç–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç")

@bot.message_handler(func=lambda m: m.text not in ["üîé –ü–æ–∏—Å–∫", "üìû –°–≤—è–∑–∞—Ç—å—Å—è", "üì¶ –ó–∞–∫–∞–∑–∞—Ç—å"])
def search_by_name(message):
    query = message.text.strip().lower()
    rose = next((r for r in cached_roses if query in r.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '').lower()), None)

    if not rose:
        bot.send_message(message.chat.id, "üö´ –†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    caption = (
        f"üåπ <b>{rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
        f"{rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '')}\n"
        f"–¶–µ–Ω–∞: {rose.get('price', '?')}"
    )

    photo_urls = [url.strip() for url in rose.get('photo', '').split(',') if url.strip()]
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(
        telebot.types.InlineKeyboardButton("ü™¥ –£—Ö–æ–¥", callback_data=f"care_{rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ')}"),
        telebot.types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history_{rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ')}")
    )

    if photo_urls:
        media = [telebot.types.InputMediaPhoto(media=url) for url in photo_urls[:10]]
        media[0].caption = caption
        media[0].parse_mode = 'HTML'
        bot.send_media_group(message.chat.id, media)
        bot.send_message(message.chat.id, "üëá –ü–æ–¥—Ä–æ–±–Ω–µ–µ:", reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, caption, parse_mode='HTML', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith(("care_", "history_")))
def handle_buttons(call):
    action, rose_name = call.data.split("_", 1)
    rose = next((r for r in cached_roses if rose_name.lower() in r.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '').lower()), None)

    if not rose:
        bot.answer_callback_query(call.id, "–†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    if action == "care":
        bot.send_message(call.message.chat.id, f"ü™¥ –£—Ö–æ–¥:\n{rose.get('–£—Ö–æ–¥', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
    else:
        bot.send_message(call.message.chat.id, f"üìú –ò—Å—Ç–æ—Ä–∏—è:\n{rose.get('–ò—Å—Ç–æ—Ä–∏—è', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
    bot.answer_callback_query(call.id)

# –û—Ç–ª–∞–¥–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)
