# bot.py

import os
import json
import logging
import telebot
from flask import Flask, request, render_template, send_from_directory, jsonify
from datetime import datetime
from google.oauth2.service_account import Credentials
import gspread
import urllib.parse
import hashlib

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ =====
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_env_var(name):
    value = os.getenv(name)
    if not value:
        logger.error(f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {name}")
        raise RuntimeError(f"–û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {name}")
    return value

BOT_TOKEN = get_env_var("BOT_TOKEN")
SPREADSHEET_URL = get_env_var("SPREADSHEET_URL")
CREDS_JSON = json.loads(get_env_var("GOOGLE_APPLICATION_CREDENTIALS_JSON"))

bot = telebot.TeleBot(BOT_TOKEN)

# ===== –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets =====
creds = Credentials.from_service_account_info(CREDS_JSON, scopes=["https://www.googleapis.com/auth/spreadsheets"])
gs = gspread.authorize(creds)
spreadsheet = gs.open_by_url(SPREADSHEET_URL)
sheet_roses = spreadsheet.sheet1
sheet_users = spreadsheet.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
sheet_favorites = spreadsheet.worksheet("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")

# ===== –ö—ç—à =====
cached_roses = []
user_search_results = {}
user_favorites = {}
user_last_info_messages = {}
rose_name_hashes = {}
user_search_result_messages = {}

# ===== Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ =====
app = Flask(__name__, 
           template_folder='templates',
           static_folder='static')

# URL –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
DOMAIN = os.getenv('RAILWAY_PUBLIC_DOMAIN')
if DOMAIN:
    WEB_APP_URL = f"https://{DOMAIN}/app"
    WEBHOOK_URL = f"https://{DOMAIN}/telegram"
else:
    WEB_APP_URL = "https://your-app-url.railway.app/app"
    WEBHOOK_URL = "https://your-app-url.railway.app/telegram"

try:
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

# ===== –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è =====
@app.route("/")
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"

@app.route("/app")
def web_app():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return render_template('index.html')

@app.route("/api/roses")
def get_roses():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–æ–∑"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        query = request.args.get('search', '').lower()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–æ–∑—ã
        if query:
            filtered_roses = [r for r in cached_roses if query in r.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "").lower()]
        else:
            filtered_roses = cached_roses[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        roses_data = []
        for rose in filtered_roses:
            roses_data.append({
                'id': hashlib.md5(rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '').encode()).hexdigest()[:10],
                'name': rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                'description': rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')[:200] + '...' if len(rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '')) > 200 else rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'),
                'photo': rose.get('photo', ''),
                'care': rose.get('–£—Ö–æ–¥', '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ö–æ–¥–µ'),
                'history': rose.get('–ò—Å—Ç–æ—Ä–∏—è', '–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
            })
        
        return jsonify({'roses': roses_data, 'count': len(roses_data)})
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API /api/roses: {e}")
        return jsonify({'error': str(e)}), 500

@app.route("/api/roses/<rose_id>")
def get_rose_detail(rose_id):
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–∑–µ"""
    try:
        # –ò—â–µ–º —Ä–æ–∑—É –ø–æ ID (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π ID)
        for rose in cached_roses:
            if hashlib.md5(rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '').encode()).hexdigest()[:10] == rose_id:
                return jsonify({
                    'id': rose_id,
                    'name': rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                    'description': rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'),
                    'photo': rose.get('photo', ''),
                    'care': rose.get('–£—Ö–æ–¥', '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ö–æ–¥–µ'),
                    'history': rose.get('–ò—Å—Ç–æ—Ä–∏—è', '–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
                })
        
        return jsonify({'error': '–†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API /api/roses/{rose_id}: {e}")
        return jsonify({'error': str(e)}), 500

@app.route("/api/favorites/<int:user_id>")
def get_user_favorites(user_id):
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–æ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        favorites = user_favorites.get(user_id, [])
        favorites_data = []
        for rose in favorites:
            favorites_data.append({
                'id': hashlib.md5(rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '').encode()).hexdigest()[:10],
                'name': rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                'description': rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')[:200] + '...' if len(rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '')) > 200 else rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'),
                'photo': rose.get('photo', ''),
                'care': rose.get('–£—Ö–æ–¥', '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ö–æ–¥–µ'),
                'history': rose.get('–ò—Å—Ç–æ—Ä–∏—è', '–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
            })
        return jsonify({'favorites': favorites_data, 'count': len(favorites_data)})
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API /api/favorites/{user_id}: {e}")
        return jsonify({'error': str(e)}), 500

@app.route("/static/<path:path>")
def send_static(path):
    return send_from_directory('static', path)

@app.route("/telegram", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "", 200

# ===== –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ =====
@bot.message_handler(commands=["start"])
def start(message):
    try:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üîé –ü–æ–∏—Å–∫")
        markup.row("üìû –°–≤—è–∑–∞—Ç—å—Å—è", "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        web_app_btn = telebot.types.KeyboardButton("üì± –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=telebot.types.WebAppInfo(WEB_APP_URL))
        markup.add(web_app_btn)
        
        bot.send_message(message.chat.id, 
                        "üåπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Ä–æ–∑!\n"
                        "‚ú® –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n"
                        "üîç –ò–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ",
                        reply_markup=markup)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ start: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(commands=["app"])
def open_app(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        web_app_btn = telebot.types.KeyboardButton("üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=telebot.types.WebAppInfo(WEB_APP_URL))
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True).add(web_app_btn)
        
        bot.send_message(message.chat.id, 
                        "üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:",
                        reply_markup=markup)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ open_app: {e}")

# ===== –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) =====
# ... (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)

# ===== –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö =====
load_roses()
load_favorites()

# ===== –ó–∞–ø—É—Å–∫ =====
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host="0.0.0.0", port=port)
