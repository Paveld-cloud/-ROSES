import os
import json
import logging
import urllib.parse
import telebot
from flask import Flask, request
from google.oauth2.service_account import Credentials
import gspread
from datetime import datetime

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
CREDS_JSON = json.loads(os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON"))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
creds = Credentials.from_service_account_info(
    CREDS_JSON,
    scopes=["https://www.googleapis.com/auth/spreadsheets"]
)
gs = gspread.authorize(creds)
sheet = gs.open_by_url(SPREADSHEET_URL).sheet1
sheet_users = gs.open_by_url(SPREADSHEET_URL).worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")

# –ö—ç—à –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∑
cached_roses = []
def refresh_cached_roses():
    global cached_roses
    try:
        cached_roses = sheet.get_all_records()
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–æ–∑ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        cached_roses = []

refresh_cached_roses()

# Flask
app = Flask(__name__)
WEBHOOK_URL = "https://" + os.getenv("RAILWAY_PUBLIC_DOMAIN", "")
try:
    bot.remove_webhook()
    if WEBHOOK_URL:
        bot.set_webhook(url=f"{WEBHOOK_URL}/telegram")
        logger.info(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/telegram")
except Exception as e:
    logger.error(f"‚ùå Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")

@app.route('/')
def index():
    return 'Bot is running'

@app.route('/telegram', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
    bot.process_new_updates([update])
    return '', 200

def log_user_query(message, query_text):
    try:
        sheet_users.append_row([
            message.from_user.id,
            message.from_user.first_name,
            f"@{message.from_user.username}" if message.from_user.username else "",
            datetime.now().strftime("%Y-%m-%d %H:%M"),
            query_text
        ])
        logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {query_text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")

def setup_handlers():
    @bot.message_handler(commands=['start'])
    def welcome(message):
        send_main_menu(message.chat.id, "üåπ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

    @bot.message_handler(commands=['menu'])
    def show_menu(message):
        send_main_menu(message.chat.id, "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")

    def send_main_menu(chat_id, text):
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üîé –ü–æ–∏—Å–∫")
        markup.row("üìû –°–≤—è–∑–∞—Ç—å—Å—è")
        bot.send_message(chat_id, text, parse_mode='HTML', reply_markup=markup)

    @bot.message_handler(func=lambda m: m.text == "üîé –ü–æ–∏—Å–∫")
    def handle_search_prompt(message):
        bot.send_message(message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã")

    @bot.message_handler(func=lambda m: m.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è")
    def handle_contact(message):
        bot.reply_to(message, "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @your_username")

    @bot.message_handler(func=lambda m: True)
    def handle_query(message):
        query = message.text.strip().lower()
        if query in ["–º–µ–Ω—é", "–Ω–∞—á–∞—Ç—å", "/menu", "/start"]:
            send_main_menu(message.chat.id, "üîÑ –ú–µ–Ω—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            return
        log_user_query(message, query)
        results = [r for r in cached_roses if query in r.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '').lower()]
        if not results:
            bot.send_message(message.chat.id, "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        for rose in results[:5]:
            send_rose_card(message.chat.id, rose)

    def send_rose_card(chat_id, rose):
        caption = (
            f"üåπ <b>{rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
            f"{rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '')}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {rose.get('price', '?')}"
        )
        photo_url = rose.get('photo', 'https://example.com/default.jpg')
        keyboard = telebot.types.InlineKeyboardMarkup()
        encoded_name = urllib.parse.quote_plus(rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', ''))
        keyboard.add(
            telebot.types.InlineKeyboardButton("ü™¥ –£—Ö–æ–¥", callback_data=f"care_{encoded_name}"),
            telebot.types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history_{encoded_name}")
        )
        bot.send_photo(chat_id, photo_url, caption=caption, parse_mode='HTML', reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data.startswith(("care_", "history_")))
    def handle_rose_details(call):
        try:
            action, encoded_name = call.data.split("_", 1)
            name = urllib.parse.unquote_plus(encoded_name)
            rose = next((r for r in cached_roses if r.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "").strip().lower() == name.strip().lower()), None)
            if not rose:
                bot.send_message(call.message.chat.id, "‚ùå –†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            if action == "care":
                bot.send_message(call.message.chat.id, f"ü™¥ –£—Ö–æ–¥:\n{rose.get('–£—Ö–æ–¥', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            else:
                bot.send_message(call.message.chat.id, f"üìú –ò—Å—Ç–æ—Ä–∏—è:\n{rose.get('–ò—Å—Ç–æ—Ä–∏—è', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ callback: {e}")
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞")

setup_handlers()

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 8080))
    logger.info(f"üöÄ Flask –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host="0.0.0.0", port=port)
