import os
import json
import logging
import telebot
from flask import Flask, request
from google.oauth2.service_account import Credentials
import gspread

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
CREDS_JSON = json.loads(os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON"))

bot = telebot.TeleBot(BOT_TOKEN)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
creds = Credentials.from_service_account_info(
    CREDS_JSON, scopes=["https://www.googleapis.com/auth/spreadsheets.readonly"]
)
gs = gspread.authorize(creds)
sheet = gs.open_by_url(SPREADSHEET_URL).sheet1
cached_roses = sheet.get_all_records()
logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã")

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

WEBHOOK_URL = "https://" + os.getenv("RAILWAY_PUBLIC_DOMAIN")
bot.remove_webhook()
bot.set_webhook(url=f"{WEBHOOK_URL}/telegram")
logger.info(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/telegram")

@app.route('/')
def index():
    return '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'

@app.route('/telegram', methods=['POST'])
def telegram_webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
    bot.process_new_updates([update])
    return '', 200

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üîé –ü–æ–∏—Å–∫", "üìû –°–≤—è–∑–∞—Ç—å—Å—è")
    markup.row("üì¶ –ó–∞–∫–∞–∑–∞—Ç—å")
    
    with open("welcome.gif", "rb") as gif:  # –î–æ–±–∞–≤—å —Å–≤–æ–π —Ñ–∞–π–ª –≤ –ø—Ä–æ–µ–∫—Ç
        bot.send_animation(message.chat.id, gif)

    bot.send_message(
        message.chat.id,
        "üåπ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Ä–æ–∑!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        parse_mode='HTML',
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == "üîé –ü–æ–∏—Å–∫")
def handle_search(message):
    bot.reply_to(message, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã")

@bot.message_handler(func=lambda m: m.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è")
def handle_contact(message):
    bot.reply_to(message, "üì® –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @your_username")

@bot.message_handler(func=lambda m: m.text == "üì¶ –ó–∞–∫–∞–∑–∞—Ç—å")
def handle_order(message):
    bot.reply_to(message, "üõí –£–∫–∞–∂–∏—Ç–µ —Å–æ—Ä—Ç–∞ —Ä–æ–∑ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")

@bot.message_handler(func=lambda m: m.text and m.text not in ["üîé –ü–æ–∏—Å–∫", "üìû –°–≤—è–∑–∞—Ç—å—Å—è", "üì¶ –ó–∞–∫–∞–∑–∞—Ç—å"])
def find_rose_by_name(message):
    query = message.text.strip().lower()
    found = next((r for r in cached_roses if query in r.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '').lower()), None)
    if found:
        caption = (
            f"üåπ <b>{found.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
            f"{found.get('–û–ø–∏—Å–∞–Ω–∏–µ', '')}\n–¶–µ–Ω–∞: {found.get('price', '?')}"
        )
        photos = [url.strip() for url in found.get('photo', '').split(',') if url.strip()]
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(
            telebot.types.InlineKeyboardButton("ü™¥ –£—Ö–æ–¥ üå±", callback_data=f"care_{found.get('–ù–∞–∑–≤–∞–Ω–∏–µ')}"),
            telebot.types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è üå∏", callback_data=f"history_{found.get('–ù–∞–∑–≤–∞–Ω–∏–µ')}")
        )

        if len(photos) > 1:
            media = [telebot.types.InputMediaPhoto(media=photo) for photo in photos]
            media[0].caption = caption
            media[0].parse_mode = 'HTML'
            bot.send_media_group(message.chat.id, media)
            bot.send_message(message.chat.id, "üîò –ü–æ–¥—Ä–æ–±–Ω–µ–µ:", reply_markup=keyboard)
        else:
            photo = photos[0] if photos else "https://example.com/default.jpg"
            bot.send_photo(message.chat.id, photo, caption=caption, parse_mode='HTML', reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "üö´ –†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@bot.callback_query_handler(func=lambda call: call.data.startswith(("care_", "history_")))
def handle_rose_details(call):
    action, rose_name = call.data.split("_", 1)
    rose = next((r for r in cached_roses if rose_name.lower() in r.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '').lower()), None)
    if not rose:
        bot.answer_callback_query(call.id, "üö´ –†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    text = rose.get("–£—Ö–æ–¥", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö") if action == "care" else rose.get("–ò—Å—Ç–æ—Ä–∏—è", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    title = "ü™¥ –£—Ö–æ–¥:" if action == "care" else "üìú –ò—Å—Ç–æ—Ä–∏—è:"
    bot.send_message(call.message.chat.id, f"{title}\n{text}")
    bot.answer_callback_query(call.id)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    port = int(os.environ.get("PORT", 8080))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host="0.0.0.0", port=port)
