import os
import json
import logging
import telebot
from flask import Flask, request
from google.oauth2.service_account import Credentials
import gspread
from datetime import datetime

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
CREDS_JSON = json.loads(os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON"))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
gs = None
sheet = None
sheet_users = None
if SPREADSHEET_URL and CREDS_JSON:
    try:
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
        creds = Credentials.from_service_account_info(
            CREDS_JSON,
            scopes=["https://www.googleapis.com/auth/spreadsheets "]
        )
        gs = gspread.authorize(creds)
        sheet = gs.open_by_url(SPREADSHEET_URL).sheet1
        sheet_users = gs.open_by_url(SPREADSHEET_URL).worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        logger.info("‚úÖ Google Sheets –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {e}")
else:
    logger.warning("‚ö†Ô∏è Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ ‚Äî –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É")

# –ö—ç—à –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∑ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
cached_roses = []
user_search_results = {}  # {user_id: [results]}
user_favorites = {}       # {user_id: [roses]}

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞ —Ä–æ–∑
rose_search_stats = {}  # {–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ä–æ–∑—ã: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–æ–∏—Å–∫–æ–≤}

def refresh_cached_roses():
    global cached_roses
    try:
        if sheet:
            cached_roses = sheet.get_all_records()
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–æ–∑ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã")
        else:
            cached_roses = []
            logger.warning("‚ö†Ô∏è Google –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ ‚Äî –¥–∞–Ω–Ω—ã–µ —Ä–æ–∑ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        cached_roses = []

refresh_cached_roses()

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ Webhook
app = Flask(__name__)
WEBHOOK_URL = "https://" + os.getenv("RAILWAY_PUBLIC_DOMAIN", "")
try:
    bot.remove_webhook()
    if WEBHOOK_URL:
        bot.set_webhook(url=f"{WEBHOOK_URL}/telegram")
        logger.info(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/telegram")
except Exception as e:
    logger.error(f"‚ùå Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")

@app.route('/')
def index():
    return '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'

@app.route('/telegram', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
    bot.process_new_updates([update])
    return '', 200

# üì• –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
def log_user_query(message, query_text, found=False):
    try:
        if sheet_users and found:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã, –∞ –Ω–µ –≤—Ö–æ–¥–Ω–æ–π –∑–∞–ø—Ä–æ—Å
            sheet_users.append_row([
                message.from_user.id,
                message.from_user.first_name,
                f"@{message.from_user.username}" if message.from_user.username else "",
                datetime.now().strftime("%Y-%m-%d %H:%M"),
                query_text  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            ])
            logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {query_text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
def setup_handlers():

    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        send_main_menu(message.chat.id, "üåπ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

    @bot.message_handler(commands=['menu'])
    def show_menu(message):
        send_main_menu(message.chat.id, "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")

    def send_main_menu(chat_id, text):
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üîé –ü–æ–∏—Å–∫")
        markup.row("üìû –°–≤—è–∑–∞—Ç—å—Å—è", "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
        bot.send_message(chat_id, text, parse_mode='HTML', reply_markup=markup)

    @bot.message_handler(func=lambda m: m.text == "üîé –ü–æ–∏—Å–∫")
    def handle_search_prompt(message):
        bot.send_message(message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã")

    @bot.message_handler(func=lambda m: m.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è")
    def handle_contact(message):
        bot.reply_to(message, "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @your_username")

    @bot.message_handler(func=lambda m: m.text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
    def handle_favorites(message):
        show_favorites(message)

    @bot.message_handler(commands=['favorites'])
    def handle_favorites_command(message):
        show_favorites(message)

    def show_favorites(message):
        user_id = message.from_user.id
        favorites = user_favorites.get(user_id, [])

        if not favorites:
            bot.send_message(message.chat.id, "üíî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–æ–∑.")
            return

        bot.send_message(message.chat.id, "‚≠ê –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã:")

        for idx, rose in enumerate(favorites):
            caption = (
                f"üåπ <b>{rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '?')}"
            )
            photo_url = rose.get('photo', 'https://example.com/default.jpg ')
            keyboard = telebot.types.InlineKeyboardMarkup()
            keyboard.row(
                telebot.types.InlineKeyboardButton("ü™¥ –£—Ö–æ–¥", callback_data=f"fav_care_{idx}"),
                telebot.types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"fav_history_{idx}")
            )
            keyboard.add(
                telebot.types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"delete_fav_{idx}")
            )
            bot.send_photo(message.chat.id, photo_url, caption=caption, parse_mode='HTML', reply_markup=keyboard)

    @bot.message_handler(func=lambda message: True)
    def handle_search_text(message):
        query = message.text.strip().lower()
        if query in ["–º–µ–Ω—é", "–Ω–∞—á–∞—Ç—å", "/menu", "/start"]:
            send_main_menu(message.chat.id, "üîÑ –ú–µ–Ω—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            return

        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        log_user_query(message, query)  # –ë–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É, —Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥–∞—Ö

        results = [r for r in cached_roses if query in r.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '').lower()]
        if not results:
            bot.send_message(message.chat.id, "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –ø–æ–∏—Å–∫–∏
        log_user_query(message, query, found=True)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Ä–æ–∑–∞–º
        for rose in results:
            name = rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            if name in rose_search_stats:
                rose_search_stats[name] += 1
            else:
                rose_search_stats[name] = 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_search_results[message.from_user.id] = results

        for idx, rose in enumerate(results[:5]):
            send_rose_card(message.chat.id, rose, message.from_user.id, idx)

    def send_rose_card(chat_id, rose, user_id, idx):
        caption = (
            f"üåπ <b>{rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '?')}"
        )

        photo_url = rose.get('photo', 'https://example.com/default.jpg ')
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.row(
            telebot.types.InlineKeyboardButton("ü™¥ –£—Ö–æ–¥", callback_data=f"care_{user_id}_{idx}"),
            telebot.types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history_{user_id}_{idx}")
        )
        keyboard.add(
            telebot.types.InlineKeyboardButton("‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"favorite_{user_id}_{idx}")
        )
        bot.send_photo(chat_id, photo_url, caption=caption, parse_mode='HTML', reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data.startswith(("care_", "history_")))
    def handle_rose_details(call):
        try:
            action, user_id, idx = call.data.split("_")
            user_id = int(user_id)
            idx = int(idx)

            results = user_search_results.get(user_id, [])
            if not results or idx >= len(results):
                bot.answer_callback_query(call.id, "‚ùå –†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            rose = results[idx]
            if action == "care":
                bot.send_message(call.message.chat.id, f"ü™¥ –£—Ö–æ–¥:\n{rose.get('–£—Ö–æ–¥', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            else:
                bot.send_message(call.message.chat.id, f"üìú –ò—Å—Ç–æ—Ä–∏—è:\n{rose.get('–ò—Å—Ç–æ—Ä–∏—è', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("favorite_"))
    def handle_add_to_favorites(call):
        try:
            _, user_id, idx = call.data.split("_")
            user_id = int(user_id)
            idx = int(idx)

            results = user_search_results.get(user_id, [])
            if not results or idx >= len(results):
                bot.answer_callback_query(call.id, "‚ùå –†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            selected_rose = results[idx]

            if user_id not in user_favorites:
                user_favorites[user_id] = []

            if any(r.get('–ù–∞–∑–≤–∞–Ω–∏–µ') == selected_rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ') for r in user_favorites[user_id]):
                bot.answer_callback_query(call.id, "‚ö†Ô∏è –£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
            else:
                user_favorites[user_id].append(selected_rose)
                bot.answer_callback_query(call.id, "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google –¢–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
                if SPREADSHEET_URL and sheet_users:
                    save_favorite_to_sheet(user_id, call.from_user, selected_rose)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")

    def save_favorite_to_sheet(user_id, user, rose):
        try:
            first_name = user.first_name
            username = f"@{user.username}" if user.username else ""
            date = datetime.now().strftime("%Y-%m-%d %H:%M")
            favorite_name = rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')

            sheet_favorites = gs.open_by_url(SPREADSHEET_URL).worksheet("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
            sheet_favorites.append_row([
                user_id,
                first_name,
                username,
                date,
                favorite_name
            ])
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ Google –¢–∞–±–ª–∏—Ü—É: {favorite_name} (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id})")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É: {e}", exc_info=True)

    @bot.callback_query_handler(func=lambda call: call.data.startswith(("fav_care_", "fav_history_")))
    def handle_favorite_details(call):
        try:
            action, idx = call.data.split("_")
            idx = int(idx)
            user_id = call.from_user.id

            favorites = user_favorites.get(user_id, [])
            if not favorites or idx >= len(favorites):
                bot.answer_callback_query(call.id, "‚ùå –†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            rose = favorites[idx]
            if action == "fav_care":
                bot.send_message(call.message.chat.id, f"ü™¥ –£—Ö–æ–¥:\n{rose.get('–£—Ö–æ–¥', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            elif action == "fav_history":
                bot.send_message(call.message.chat.id, f"üìú –ò—Å—Ç–æ—Ä–∏—è:\n{rose.get('–ò—Å—Ç–æ—Ä–∏—è', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("delete_fav_"))
    def handle_delete_favorite(call):
        try:
            data_parts = call.data.split("_")
            if len(data_parts) < 2:
                logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_ {call.data}")
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞")
                return

            idx = int(data_parts[2])  # delete_fav_1 ‚Üí ['delete', 'fav', '1']
            user_id = call.from_user.id

            favorites = user_favorites.get(user_id, [])

            if not favorites or idx >= len(favorites):
                logger.warning(f"‚ùå –†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {idx}")
                bot.answer_callback_query(call.id, "‚ùå –†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            removed_rose = favorites.pop(idx)
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {removed_rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ')} (ID: {user_id})")
            bot.answer_callback_query(call.id, f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {removed_rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")

            # –£–¥–∞–ª—è–µ–º –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
            if SPREADSHEET_URL:
                delete_favorite_from_sheet(user_id, removed_rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', ''))
            else:
                logger.warning("‚ùå Google –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")

            bot.send_message(call.message.chat.id, "üîÑ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:")
            show_favorites(call.message)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")

    def delete_favorite_from_sheet(user_id, rose_name):
        try:
            logger.info(f"üîç –ò—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, —Ä–æ–∑–∞ '{rose_name}'")

            sheet_favorites = gs.open_by_url(SPREADSHEET_URL).worksheet("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
            all_data = sheet_favorites.get_all_values()

            found = False
            for row_idx, row in enumerate(all_data[1:], start=2):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if str(user_id) == row[0].strip() and rose_name.strip() == row[4].strip():
                    logger.info(f"üóë –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É {row_idx}: {row}")
                    sheet_favorites.delete_rows(row_idx)
                    found = True
                    break

            if not found:
                logger.warning(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, —Ä–æ–∑–∞ '{rose_name}'")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã: {e}", exc_info=True)

    @bot.message_handler(commands=['stats'])
    def send_stats(message):
        if not rose_search_stats:
            bot.send_message(message.chat.id, "üìä –ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–∏—Å–∫—É —Ä–æ–∑.")
            return

        bot.send_message(message.chat.id, "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–æ–∑:")

        sorted_stats = sorted(rose_search_stats.items(), key=lambda x: x[1], reverse=True)
        for name, count in sorted_stats:
            bot.send_message(message.chat.id, f"üåπ {name}: {count} –ø–æ–∏—Å–∫–æ–≤")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ Google –¢–∞–±–ª–∏—Ü—É
        if SPREADSHEET_URL:
            save_stats_to_sheet()

    def save_stats_to_sheet():
        if not SPREADSHEET_URL:
            logger.warning("‚ùå Google –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            return

        try:
            sheet_stats = gs.open_by_url(SPREADSHEET_URL).worksheet("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            sheet_stats.clear()
            sheet_stats.append_row(["–°–æ—Ä—Ç —Ä–æ–∑—ã", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–æ–≤"])

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
            sorted_stats = sorted(rose_search_stats.items(), key=lambda x: x[1], reverse=True)

            for name, count in sorted_stats:
                sheet_stats.append_row([name, count])

            logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Google –¢–∞–±–ª–∏—Ü—É")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

setup_handlers()

# –ó–∞–ø—É—Å–∫ Flask
if __name__ == '__main__':
    port = int(os.environ.get("PORT", 8080))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Flask –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host="0.0.0.0", port=port)
