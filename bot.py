import os
import json
import logging
import telebot
import urllib.parse
import gspread
from datetime import datetime
from dotenv import load_dotenv
from google.oauth2.service_account import Credentials
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# ==================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ====================
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
creds_json = os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON")

# ==================== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ====================
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ==================== –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets ====================
scopes = ['https://www.googleapis.com/auth/spreadsheets']
creds = Credentials.from_service_account_info(json.loads(creds_json), scopes=scopes)
gs = gspread.authorize(creds)
spreadsheet = gs.open_by_url(SPREADSHEET_URL)
sheet = spreadsheet.worksheet("List1")
users_sheet = spreadsheet.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")

# ==================== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ====================
bot = telebot.TeleBot(BOT_TOKEN)

# ==================== –ö–Ω–æ–ø–∫–∏ ====================
def start_keyboard():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("üîç –ü–æ–∏—Å–∫"))
    return markup

def rose_inline_buttons(rose_name):
    encoded = urllib.parse.quote_plus(rose_name)
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("ü™¥ –£—Ö–æ–¥", callback_data=f"care_{encoded}"),
        InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"story_{encoded}")
    )
    return markup

# ==================== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–æ—Å–∞ ====================
def save_user(message, query=None):
    user_id = message.from_user.id
    name = message.from_user.first_name or ''
    username = message.from_user.username or ''
    date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    row = [str(user_id), name, username, date, query or ""]
    users_sheet.append_row(row)

# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ /start ====================
@bot.message_handler(commands=['start'])
def handle_start(message):
    save_user(message)
    bot.send_message(
        message.chat.id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã –¥–ª—è –ø–æ–∏—Å–∫–∞.",
        reply_markup=start_keyboard()
    )

# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ü–æ–∏—Å–∫" ====================
@bot.message_handler(func=lambda msg: msg.text == "üîç –ü–æ–∏—Å–∫")
def handle_search_command(message):
    bot.send_message(message.chat.id, "üîé –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã")

# ==================== –ü–æ–∏—Å–∫ —Ä–æ–∑—ã ====================
@bot.message_handler(func=lambda message: True)
def handle_query(message):
    query = message.text.strip().lower()
    save_user(message, query)

    rows = sheet.get_all_records()
    found_roses = [r for r in rows if query in str(r.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "")).lower()]

    if not found_roses:
        bot.send_message(message.chat.id, "‚ùå –†–æ–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    for rose in found_roses:
        caption = (
            f"üåπ <b>{rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n\n"
            f"–¶–µ–Ω–∞: {rose.get('price', '')}\n"
            f"{rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '')}"
        )
        photo_url = rose.get("photo", "")
        buttons = rose_inline_buttons(rose.get("–ù–∞–∑–≤–∞–Ω–∏–µ", ""))
        try:
            bot.send_photo(message.chat.id, photo_url, caption=caption, reply_markup=buttons, parse_mode='HTML')
        except Exception:
            bot.send_message(message.chat.id, caption, reply_markup=buttons, parse_mode='HTML')

# ==================== Inline-–∫–Ω–æ–ø–∫–∏ ====================
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    data = call.data
    if data.startswith("care_"):
        name = urllib.parse.unquote_plus(data[5:])
        rows = sheet.get_all_records()
        for rose in rows:
            if name.strip().lower() in str(rose.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "")).strip().lower():
                text = rose.get("–£—Ö–æ–¥", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ö–æ–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
                bot.send_message(call.message.chat.id, f"ü™¥ <b>–£—Ö–æ–¥ –∑–∞ —Ä–æ–∑–æ–π</b>\n\n{text}", parse_mode='HTML')
                break

    elif data.startswith("story_"):
        name = urllib.parse.unquote_plus(data[6:])
        rows = sheet.get_all_records()
        for rose in rows:
            if name.strip().lower() in str(rose.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "")).strip().lower():
                text = rose.get("–ò—Å—Ç–æ—Ä–∏—è", "–ò—Å—Ç–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
                bot.send_message(call.message.chat.id, f"üìú <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã</b>\n\n{text}", parse_mode='HTML')
                break

# ==================== –ó–∞–ø—É—Å–∫ ====================
if __name__ == "__main__":
    from flask import Flask, request

    app = Flask(__name__)

    @app.route(f"/{BOT_TOKEN}", methods=["POST"])
    def webhook():
        bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
        return "!", 200

    @app.route("/")
    def index():
        return "Bot is running!"

    bot.remove_webhook()
    bot.set_webhook(url=f"{os.getenv('WEBHOOK_URL')}/{BOT_TOKEN}")
