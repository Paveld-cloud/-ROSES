import os
import telebot
import gspread
import urllib.parse
from dotenv import load_dotenv
from google.oauth2.service_account import Credentials
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
GOOGLE_APPLICATION_CREDENTIALS_JSON = os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
creds = Credentials.from_service_account_info(eval(GOOGLE_APPLICATION_CREDENTIALS_JSON))
gs = gspread.authorize(creds)
spreadsheet = gs.open_by_url(SPREADSHEET_URL)
sheet = spreadsheet.worksheet("List1")
users_sheet = spreadsheet.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# === –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç ===
def get_main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üîç –ü–æ–∏—Å–∫"), KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è"), KeyboardButton("üì¶ –ó–∞–∫–∞–∑–∞—Ç—å"))
    return markup

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–æ—Å–æ–≤ ===
def save_user_info(message, query=None):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    if query:
        users_sheet.append_row([user_id, first_name, username, date, query])
    else:
        users_sheet.append_row([user_id, first_name, username, date, ""])

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@bot.message_handler(commands=['start'])
def send_welcome(message):
    save_user_info(message)
    bot.send_message(
        message.chat.id,
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã",
        reply_markup=get_main_menu()
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@bot.message_handler(func=lambda m: True)
def handle_text(message):
    text = message.text.lower()
    if text == "üîç –ø–æ–∏—Å–∫":
        bot.send_message(message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã", reply_markup=get_main_menu())
        return
    elif text in ["üìû —Å–≤—è–∑–∞—Ç—å—Å—è", "üì¶ –∑–∞–∫–∞–∑–∞—Ç—å"]:
        bot.send_message(message.chat.id, "‚è≥ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=get_main_menu())
        return

    # –ü–æ–∏—Å–∫ —Ä–æ–∑—ã
    rows = sheet.get_all_records()
    found = None
    for row in rows:
        name = str(row.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '')).lower()
        if text in name:
            found = row
            break

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Ç–∞–±–ª–∏—Ü—É
    save_user_info(message, query=text)

    if not found:
        bot.send_message(message.chat.id, "‚ùå –†–æ–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=get_main_menu())
        return

    # –ö–∞—Ä—Ç–∏–Ω–∫–∞
    photo = found.get('photo')
    # –ü–æ–¥–ø–∏—Å—å
    caption = (
        f"üåπ <b>{found.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
        f"{found.get('price', '')}"
    )

    # Inline-–∫–Ω–æ–ø–∫–∏
    buttons = []
    if found.get("–£—Ö–æ–¥"):
        buttons.append(InlineKeyboardButton("ü™¥ –£—Ö–æ–¥", callback_data="care_" + urllib.parse.quote_plus(found['–ù–∞–∑–≤–∞–Ω–∏–µ'])))
    if found.get("–ò—Å—Ç–æ—Ä–∏—è"):
        buttons.append(InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="history_" + urllib.parse.quote_plus(found['–ù–∞–∑–≤–∞–Ω–∏–µ'])))
    markup = InlineKeyboardMarkup()
    if buttons:
        markup.add(*buttons)

    # –û—Ç–ø—Ä–∞–≤–∫–∞
    bot.send_photo(message.chat.id, photo, caption=caption, parse_mode="HTML", reply_markup=markup)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ ===
@bot.callback_query_handler(func=lambda call: call.data.startswith("care_") or call.data.startswith("history_"))
def handle_callback(call):
    data_type, encoded_name = call.data.split("_", 1)
    name = urllib.parse.unquote_plus(encoded_name)

    rows = sheet.get_all_records()
    for row in rows:
        if name.strip() == row.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "").strip():
            if data_type == "care":
                bot.send_message(call.message.chat.id, f"ü™¥ –£—Ö–æ–¥ –∑–∞ {name}:\n{row.get('–£—Ö–æ–¥', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
            elif data_type == "history":
                bot.send_message(call.message.chat.id, f"üìú –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ä—Ç–∞ {name}:\n{row.get('–ò—Å—Ç–æ—Ä–∏—è', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
            break

# === Webhook –∏–ª–∏ polling ===
if __name__ == '__main__':
    bot.polling(none_stop=True)
