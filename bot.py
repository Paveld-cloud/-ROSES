# bot.py
import os
import json
import logging
import telebot
from flask import Flask, request
from datetime import datetime
from google.oauth2.service_account import Credentials
import gspread
import threading

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ =====
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_env_var(name):
    value = os.getenv(name)
    if not value:
        logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {name}")
        raise RuntimeError(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {name}")
    return value

try:
    BOT_TOKEN = get_env_var("BOT_TOKEN")
    SPREADSHEET_URL = get_env_var("SPREADSHEET_URL")
    CREDS_JSON = json.loads(get_env_var("GOOGLE_APPLICATION_CREDENTIALS_JSON"))
except Exception as e:
    logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    raise

bot = telebot.TeleBot(BOT_TOKEN)

# ===== –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets =====
gs = None
sheet_roses = None
sheet_users = None
sheet_favorites = None

try:
    creds = Credentials.from_service_account_info(
        CREDS_JSON,
        scopes=["https://www.googleapis.com/auth/spreadsheets "]
    )
    gs = gspread.authorize(creds)
    spreadsheet = gs.open_by_url(SPREADSHEET_URL)
    sheet_roses = spreadsheet.sheet1
    sheet_users = spreadsheet.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    sheet_favorites = spreadsheet.worksheet("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
    logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
    raise

# ===== –ö—ç—à –¥–∞–Ω–Ω—ã—Ö =====
cached_roses = []
user_search_results = {}  # user_id: [roses]
user_favorites = {}       # user_id: [roses]

def load_roses():
    global cached_roses
    try:
        cached_roses = sheet_roses.get_all_records()
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cached_roses)} —Ä–æ–∑ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ–∑—ã: {e}")
        cached_roses = []

def load_favorites():
    try:
        all_rows = sheet_favorites.get_all_records()
        for row in all_rows:
            user_id = int(row['ID'])
            rose = {
                '–ù–∞–∑–≤–∞–Ω–∏–µ': row['–ù–∞–∑–≤–∞–Ω–∏–µ'],
                '–û–ø–∏—Å–∞–Ω–∏–µ': row['–û–ø–∏—Å–∞–Ω–∏–µ'],
                'photo': row['photo'],
                '–£—Ö–æ–¥': row['–£—Ö–æ–¥'],
                '–ò—Å—Ç–æ—Ä–∏—è': row['–ò—Å—Ç–æ—Ä–∏—è']
            }
            if user_id not in user_favorites:
                user_favorites[user_id] = []
            user_favorites[user_id].append(rose)
        logger.info("‚úÖ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")

load_roses()
load_favorites()

# ===== –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ–∏—Å–∫–∞ =====
def clear_search_cache():
    user_search_results.clear()
    threading.Timer(600, clear_search_cache).start()  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

clear_search_cache()

# ===== Flask Webhook =====
app = Flask(__name__)
WEBHOOK_URL = "https://" + os.getenv("RAILWAY_PUBLIC_DOMAIN", "")

try:
    bot.remove_webhook()
    if WEBHOOK_URL:
        bot.set_webhook(url=f"{WEBHOOK_URL}/telegram")
        logger.info(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/telegram")
except Exception as e:
    logger.error(f"‚ùå Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")

@app.route('/')
def home():
    return 'Bot is running'

@app.route('/telegram', methods=['POST'])
def telegram():
    update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
    bot.process_new_updates([update])
    return '', 200

# ===== –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã =====
@bot.message_handler(commands=['start'])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üîé –ü–æ–∏—Å–∫")
    markup.row("üìû –°–≤—è–∑–∞—Ç—å—Å—è", "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
    bot.send_message(message.chat.id, "üåπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã.", reply_markup=markup)

@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(
        message.chat.id,
        "üåπ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n"
        "‚Äî –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã –¥–ª—è –ø–æ–∏—Å–∫–∞.\n"
        "‚Äî –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Ö–æ–¥–∞, –∏—Å—Ç–æ—Ä–∏–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.\n"
        "‚Äî –ö–Ω–æ–ø–∫–∞ ‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–∫–∞–∂–µ—Ç –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ —Ä–æ–∑—ã.\n"
        "‚Äî –ö–Ω–æ–ø–∫–∞ üìû –°–≤—è–∑–∞—Ç—å—Å—è ‚Äî –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.",
        parse_mode='HTML'
    )

@bot.message_handler(func=lambda m: m.text == "üîé –ü–æ–∏—Å–∫")
def search_prompt(message):
    bot.send_message(message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã")

@bot.message_handler(func=lambda m: m.text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
def favorites(message):
    show_favorites(message)

@bot.message_handler(func=lambda m: m.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è")
def contact(message):
    bot.send_message(message.chat.id, "üìû –î–ª—è —Å–≤—è–∑–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: @your_support_username")

@bot.message_handler(func=lambda m: True)
def search(message):
    if message.text.startswith('/'):
        return
    query = message.text.strip().lower()
    results = [r for r in cached_roses if query in r.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "").lower()]
    if not results:
        bot.send_message(message.chat.id, "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    user_search_results[message.from_user.id] = results
    for idx, rose in enumerate(results[:5]):
        send_rose_card(message.chat.id, rose, message.from_user.id, idx)
        log_found_rose(message, rose)

def send_rose_card(chat_id, rose, user_id, idx):
    caption = (
        f"üåπ <b>{rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '?')}"
    )
    photo_url = rose.get('photo', '')
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.row(
        telebot.types.InlineKeyboardButton("ü™¥ –£—Ö–æ–¥", callback_data=f"care_{user_id}_{idx}"),
        telebot.types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history_{user_id}_{idx}")
    )
    keyboard.add(
        telebot.types.InlineKeyboardButton("‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_{user_id}_{idx}")
    )
    try:
        if photo_url:
            bot.send_photo(chat_id, photo_url, caption=caption, parse_mode='HTML', reply_markup=keyboard)
        else:
            bot.send_message(chat_id, caption, parse_mode='HTML', reply_markup=keyboard)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–æ–∑—ã: {e}")
        bot.send_message(chat_id, caption, parse_mode='HTML', reply_markup=keyboard)

def log_found_rose(message, rose):
    try:
        sheet_users.append_row([
            message.from_user.id,
            message.from_user.first_name,
            f"@{message.from_user.username}" if message.from_user.username else "",
            datetime.now().strftime("%Y-%m-%d %H:%M"),
            rose.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        ])
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith(("care_", "history_")))
def handle_details(call):
    try:
        action, user_id, idx = call.data.split("_")
        user_id = int(user_id)
        idx = int(idx)
        rose_list = user_search_results.get(user_id, [])
        if idx >= len(rose_list):
            bot.answer_callback_query(call.id, "‚ùå –†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        rose = rose_list[idx]
        field = "–£—Ö–æ–¥" if action == "care" else "–ò—Å—Ç–æ—Ä–∏—è"
        text = rose.get(field, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        bot.send_message(call.message.chat.id, f"{'ü™¥' if field == '–£—Ö–æ–¥' else 'üìú'} {field}:\n{text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_details: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

@bot.callback_query_handler(func=lambda call: call.data.startswith("fav_"))
def add_favorite(call):
    try:
        _, user_id, idx = call.data.split("_")
        user_id = int(user_id)
        idx = int(idx)
        rose_list = user_search_results.get(user_id, [])
        if idx >= len(rose_list):
            bot.answer_callback_query(call.id, "‚ùå –†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        rose = rose_list[idx]
        if user_id not in user_favorites:
            user_favorites[user_id] = []
        if any(r.get("–ù–∞–∑–≤–∞–Ω–∏–µ") == rose.get("–ù–∞–∑–≤–∞–Ω–∏–µ") for r in user_favorites[user_id]):
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
            return
        user_favorites[user_id].append(rose)
        try:
            sheet_favorites.append_row([
                user_id,
                call.from_user.first_name,
                f"@{call.from_user.username}" if call.from_user.username else "",
                datetime.now().strftime("%Y-%m-%d %H:%M"),
                rose.get("–ù–∞–∑–≤–∞–Ω–∏–µ", ""),
                rose.get("–û–ø–∏—Å–∞–Ω–∏–µ", ""),
                rose.get("photo", ""),
                rose.get("–£—Ö–æ–¥", ""),
                rose.get("–ò—Å—Ç–æ—Ä–∏—è", "")
            ])
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        bot.answer_callback_query(call.id, "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ add_favorite: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")

def show_favorites(message):
    user_id = message.from_user.id
    favs = user_favorites.get(user_id, [])
    if not favs:
        bot.send_message(message.chat.id, "üíî –£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–æ–∑.")
        return
    bot.send_message(message.chat.id, "‚≠ê –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã:")
    for rose in favs:
        caption = f"üåπ <b>{rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ')}</b>\n–û–ø–∏—Å–∞–Ω–∏–µ: {rose.get('–û–ø–∏—Å–∞–Ω–∏–µ')}"
        photo_url = rose.get('photo', '')
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.row(
            telebot.types.InlineKeyboardButton("ü™¥ –£—Ö–æ–¥", callback_data=f"showcare_{rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ')}"),
            telebot.types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"showhist_{rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ')}")
        )
        try:
            if photo_url:
                bot.send_photo(message.chat.id, photo_url, caption=caption, parse_mode='HTML', reply_markup=keyboard)
            else:
                bot.send_message(message.chat.id, caption, parse_mode='HTML', reply_markup=keyboard)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
            bot.send_message(message.chat.id, caption, parse_mode='HTML', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("showcare_") or call.data.startswith("showhist_"))
def handle_fav_details(call):
    try:
        prefix, name = call.data.split("_", 1)
        field = "–£—Ö–æ–¥" if prefix == "showcare" else "–ò—Å—Ç–æ—Ä–∏—è"
        user_id = call.from_user.id
        favs = user_favorites.get(user_id, [])
        for rose in favs:
            if rose.get("–ù–∞–∑–≤–∞–Ω–∏–µ") == name:
                bot.send_message(call.message.chat.id, f"{'ü™¥' if field == '–£—Ö–æ–¥' else 'üìú'} {field}:\n{rose.get(field, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
                return
        bot.answer_callback_query(call.id, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_fav_details: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

# ===== –ó–∞–ø—É—Å–∫ Flask =====
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host="0.0.0.0", port=port)
    
