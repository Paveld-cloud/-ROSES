# bot.py
import os
import json
import logging
import telebot
from flask import Flask, request, render_template, send_from_directory
from datetime import datetime
from google.oauth2.service_account import Credentials
import gspread
import urllib.parse
import hashlib
import requests

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ =====
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_env_var(name):
    value = os.getenv(name)
    if not value:
        logger.error(f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {name}")
        raise RuntimeError(f"–û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {name}")
    return value

BOT_TOKEN = get_env_var("BOT_TOKEN")
SPREADSHEET_URL = get_env_var("SPREADSHEET_URL")
CREDS_JSON = json.loads(get_env_var("GOOGLE_APPLICATION_CREDENTIALS_JSON"))

bot = telebot.TeleBot(BOT_TOKEN)

# ===== –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets =====
creds = Credentials.from_service_account_info(CREDS_JSON, scopes=["https://www.googleapis.com/auth/spreadsheets"])
gs = gspread.authorize(creds)
spreadsheet = gs.open_by_url(SPREADSHEET_URL)
sheet_roses = spreadsheet.sheet1
sheet_users = spreadsheet.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
sheet_favorites = spreadsheet.worksheet("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")

# ===== –ö—ç—à =====
cached_roses = []
user_search_results = {}

# ===== Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ =====
app = Flask(__name__, 
           template_folder='templates',
           static_folder='static')

# URL –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
DOMAIN = os.getenv('RAILWAY_PUBLIC_DOMAIN')
if DOMAIN:
    WEB_APP_URL = f"https://{DOMAIN}/app"
    WEBHOOK_URL = f"https://{DOMAIN}/telegram"
else:
    WEB_APP_URL = "https://your-app-url.railway.app/app"
    WEBHOOK_URL = "https://your-app-url.railway.app/telegram"

try:
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

# ===== –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è =====
@app.route("/")
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"

@app.route("/app")
def web_app():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - —Ç–æ–ª—å–∫–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    return render_template('favorites.html')

@app.route("/app/roses")
def get_all_roses():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–æ–∑"""
    try:
        roses_data = []
        for rose in cached_roses:
            roses_data.append({
                'id': hashlib.md5(str(rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '')).encode()).hexdigest()[:10],
                'name': str(rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '')).strip(),
                'description': str(rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '')).strip(),
                'photo': str(rose.get('photo', '')).strip(),
                'care': str(rose.get('–£—Ö–æ–¥', '')).strip(),
                'history': str(rose.get('–ò—Å—Ç–æ—Ä–∏—è', '')).strip()
            })
        return {'roses': roses_data, 'count': len(roses_data)}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API /app/roses: {e}")
        return {'error': str(e)}, 500

@app.route("/app/favorites")
def get_user_favorites():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–æ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        chat_id = request.args.get('chat_id')
        if not chat_id:
            return {'error': '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω chat_id'}, 400
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏–∑ Google Sheets
        favorites_data = []
        try:
            all_rows = sheet_favorites.get_all_records()
            for row in all_rows:
                try:
                    id_value = str(row.get('ID', '')).strip()
                    if id_value.lower() in ['id', 'user_id', ''] or not id_value:
                        continue
                        
                    if int(id_value) == int(chat_id):
                        favorites_data.append({
                            'id': hashlib.md5(str(row.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '')).encode()).hexdigest()[:10],
                            'name': str(row.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '')).strip(),
                            'description': str(row.get('–û–ø–∏—Å–∞–Ω–∏–µ', '')).strip(),
                            'photo': str(row.get('photo', '')).strip(),
                            'care': str(row.get('–£—Ö–æ–¥', '')).strip(),
                            'history': str(row.get('–ò—Å—Ç–æ—Ä–∏—è', '')).strip()
                        })
                except Exception:
                    continue
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
            
        return {'favorites': favorites_data, 'count': len(favorites_data)}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API /app/favorites: {e}")
        return {'error': str(e)}, 500

@app.route("/app/favorites/add", methods=['POST'])
def add_to_favorites():
    """API endpoint –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–∑—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    try:
        data = request.get_json()
        chat_id = data.get('chat_id')
        rose_data = data.get('rose')
        
        if not chat_id or not rose_data:
            return {'error': '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ'}, 400
            
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ Google Sheets
        sheet_favorites.append_row([
            chat_id,
            data.get('first_name', ''),
            data.get('username', ''),
            datetime.now().strftime("%Y-%m-%d %H:%M"),
            str(rose_data.get('name', '')).strip(),
            str(rose_data.get('description', '')).strip(),
            str(rose_data.get('photo', '')).strip(),
            str(rose_data.get('care', '')).strip(),
            str(rose_data.get('history', '')).strip()
        ])
        
        return {'success': True, 'message': '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API /app/favorites/add: {e}")
        return {'error': str(e)}, 500

@app.route("/static/<path:path>")
def send_static(path):
    return send_from_directory('static', path)

@app.route("/telegram", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "", 200

# ===== –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö =====
def load_roses():
    global cached_roses
    try:
        cached_roses = sheet_roses.get_all_records()
        logger.info("‚úÖ –†–æ–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–æ–∑: {len(cached_roses)}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–∑: {e}")
        cached_roses = []

# ===== –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ =====
load_roses()

# ===== –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ =====
@bot.message_handler(commands=["start"])
def start(message):
    try:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üîé –ü–æ–∏—Å–∫")
        markup.row("üìû –°–≤—è–∑–∞—Ç—å—Å—è")
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        web_app_btn = telebot.types.KeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", web_app=telebot.types.WebAppInfo(f"{WEB_APP_URL}?chat_id={message.chat.id}"))
        markup.add(web_app_btn)
        
        bot.send_message(message.chat.id, 
                        "üåπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
                        reply_markup=markup)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ start: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda m: m.text == "üîé –ü–æ–∏—Å–∫")
def prompt_search(message):
    try:
        bot.send_message(message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã:")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ prompt_search: {e}")

@bot.message_handler(func=lambda m: m.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è")
def contact(message):
    try:
        bot.send_message(message.chat.id, "üìû –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @your_support")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ contact: {e}")

# ===== –ü–æ–∏—Å–∫ =====
@bot.message_handler(func=lambda m: True)
def handle_query(message):
    try:
        text = message.text.strip().lower()
        if not text or text.startswith("/"):
            return
        results = [r for r in cached_roses if text in str(r.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "")).lower()]
        if not results:
            bot.send_message(message.chat.id, "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
            
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
        user_search_results[user_id] = results[:10]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        bot.send_message(chat_id, f"üîç –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results[:5])}")
        
        for idx, rose in enumerate(results[:5]):
            send_rose_card(message.chat.id, rose, message.from_user.id, idx)
                
        log_search(message, results[0]["–ù–∞–∑–≤–∞–Ω–∏–µ"])
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_query: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")

def send_rose_card(chat_id, rose, user_id=None, idx=None):
    try:
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–æ–∑—ã: {rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
        caption = f"üåπ <b>{str(rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')).strip()}</b>\n–û–ø–∏—Å–∞–Ω–∏–µ: {rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}"
        photo = rose.get("photo")
        markup = telebot.types.InlineKeyboardMarkup()
        
        markup.row(
            telebot.types.InlineKeyboardButton("ü™¥ –£—Ö–æ–¥", callback_data=f"care_{user_id}_{idx}"),
            telebot.types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"hist_{user_id}_{idx}")
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
        markup.add(
            telebot.types.InlineKeyboardButton("‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_{chat_id}_{idx}")
        )
        
        if photo:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ photo - –≤–∞–ª–∏–¥–Ω—ã–π URL
            if isinstance(photo, str) and (photo.startswith('http://') or photo.startswith('https://')):
                logger.info(f"üì∑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ: {photo}")
                bot.send_photo(chat_id, photo, caption=caption, parse_mode="HTML", reply_markup=markup)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL —Ñ–æ—Ç–æ: {photo}")
                bot.send_message(chat_id, caption, parse_mode="HTML", reply_markup=markup)
        else:
            logger.info("üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ —Ñ–æ—Ç–æ")
            bot.send_message(chat_id, caption, parse_mode="HTML", reply_markup=markup)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_rose_card: {e}")
        logger.error(f"‚ùå –î–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã: {rose}")
        try:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–æ–∑—ã.")
        except:
            pass

def log_search(message, rose_name):
    try:
        sheet_users.append_row([
            message.from_user.id,
            message.from_user.first_name,
            f"@{message.from_user.username}" if message.from_user.username else "",
            datetime.now().strftime("%Y-%m-%d %H:%M"),
            str(rose_name).strip()
        ])
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–∏—Å–∫–∞: {e}")

# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ =====
@bot.callback_query_handler(func=lambda c: c.data.startswith("care_") or c.data.startswith("hist_"))
def handle_info(call):
    try:
        _, uid, idx = call.data.split("_")
        user_results = user_search_results.get(int(uid), [])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞
        if int(idx) >= len(user_results):
            bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
            return
            
        rose = user_results[int(idx)]
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if "care" in call.data:
            info_text = f"ü™¥ –£—Ö–æ–¥:\n{rose.get('–£—Ö–æ–¥', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"
        else:
            info_text = f"üìú –ò—Å—Ç–æ—Ä–∏—è:\n{rose.get('–ò—Å—Ç–æ—Ä–∏—è', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"
            
        bot.send_message(chat_id, info_text)
        bot.answer_callback_query(call.id, "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_info: {e}")
        try:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        except:
            pass

@bot.callback_query_handler(func=lambda c: c.data.startswith("fav_"))
def handle_favorite(call):
    try:
        _, uid, idx = call.data.split("_")
        user_id = int(uid)
        user_results = user_search_results.get(user_id, [])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞
        if int(idx) >= len(user_results):
            bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
            return
            
        rose = user_results[int(idx)]
        chat_id = call.message.chat.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ API
        try:
            response = requests.post(
                f"https://{DOMAIN}/app/favorites/add",
                json={
                    'chat_id': chat_id,
                    'first_name': call.from_user.first_name,
                    'username': call.from_user.username,
                    'rose': {
                        'name': rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', ''),
                        'description': rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', ''),
                        'photo': rose.get('photo', ''),
                        'care': rose.get('–£—Ö–æ–¥', ''),
                        'history': rose.get('–ò—Å—Ç–æ—Ä–∏—è', '')
                    }
                }
            )
            
            if response.status_code == 200:
                bot.answer_callback_query(call.id, "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
            else:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_favorite: {e}")
        try:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        except:
            pass

# ===== –ó–∞–ø—É—Å–∫ =====
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host="0.0.0.0", port=port)
