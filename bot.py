import os
import json
import logging
import telebot
from flask import Flask, request
from google.oauth2.service_account import Credentials
import gspread
from datetime import datetime

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
CREDS_JSON = json.loads(os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON"))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
gs = None
sheet = None
sheet_users = None
if SPREADSHEET_URL and CREDS_JSON:
    try:
        creds = Credentials.from_service_account_info(
            CREDS_JSON,
            scopes=["https://www.googleapis.com/auth/spreadsheets "]
        )
        gs = gspread.authorize(creds)
        sheet = gs.open_by_url(SPREADSHEET_URL).sheet1
        sheet_users = gs.open_by_url(SPREADSHEET_URL).worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        logger.info("‚úÖ Google Sheets –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {e}")
else:
    logger.warning("‚ö†Ô∏è Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ ‚Äî –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É")

# –ö—ç—à –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∑ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
cached_roses = []
user_search_results = {}  # {user_id: [results]}
user_favorites = {}       # {user_id: [roses]}

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞ —Ä–æ–∑
rose_search_stats = {}  # {–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ä–æ–∑—ã: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–æ–∏—Å–∫–æ–≤}

def refresh_cached_roses():
    global cached_roses
    try:
        if sheet:
            cached_roses = sheet.get_all_records()
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–æ–∑ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã")
        else:
            cached_roses = []
            logger.warning("‚ö†Ô∏è Google –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ ‚Äî –¥–∞–Ω–Ω—ã–µ —Ä–æ–∑ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        cached_roses = []

refresh_cached_roses()

# Flask –∏ Webhook
app = Flask(__name__)
WEBHOOK_URL = "https://" + os.getenv("RAILWAY_PUBLIC_DOMAIN", "")
try:
    bot.remove_webhook()
    if WEBHOOK_URL:
        bot.set_webhook(url=f"{WEBHOOK_URL}/telegram")
        logger.info(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/telegram")
except Exception as e:
    logger.error(f"‚ùå Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")

@app.route('/')
def index():
    return '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'

@app.route('/telegram', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
    bot.process_new_updates([update])
    return '', 200

# üì• –ù–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
def log_found_rose(message, rose_name):
    try:
        if sheet_users:
            sheet_users.append_row([
                message.from_user.id,
                message.from_user.first_name,
                f"@{message.from_user.username}" if message.from_user.username else "",
                datetime.now().strftime("%Y-%m-%d %H:%M"),
                rose_name
            ])
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Å–æ—Ä—Ç: {rose_name}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–æ–∑—ã –≤ Google –¢–∞–±–ª–∏—Ü—É: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üîé –ü–æ–∏—Å–∫")
    markup.row("üìû –°–≤—è–∑–∞—Ç—å—Å—è", "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
    bot.send_message(message.chat.id, "üåπ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü–æ–∏—Å–∫\" –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã.", parse_mode='HTML', reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "üîé –ü–æ–∏—Å–∫")
def handle_search_prompt(message):
    bot.send_message(message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã")

@bot.message_handler(func=lambda m: True)
def handle_search_text(message):
    query = message.text.strip().lower()
    results = [r for r in cached_roses if query in r.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '').lower()]

    if not results:
        bot.send_message(message.chat.id, "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    user_search_results[message.from_user.id] = results

    for idx, rose in enumerate(results[:5]):
        send_rose_card(message.chat.id, rose, message.from_user.id, idx)
        log_found_rose(message, rose.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–æ–∑—ã
def send_rose_card(chat_id, rose, user_id, idx):
    caption = f"üåπ <b>{rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n–û–ø–∏—Å–∞–Ω–∏–µ: {rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '?')}"
    photo_url = rose.get('photo', 'https://example.com/default.jpg ')
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.row(
        telebot.types.InlineKeyboardButton("ü™¥ –£—Ö–æ–¥", callback_data=f"care_{user_id}_{idx}"),
        telebot.types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history_{user_id}_{idx}")
    )
    keyboard.add(
        telebot.types.InlineKeyboardButton("‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"favorite_{user_id}_{idx}")
    )
    bot.send_photo(chat_id, photo_url, caption=caption, parse_mode='HTML', reply_markup=keyboard)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
@bot.callback_query_handler(func=lambda call: call.data.startswith("favorite_"))
def handle_add_to_favorites(call):
    try:
        _, user_id, idx = call.data.split("_")
        user_id = int(user_id)
        idx = int(idx)

        results = user_search_results.get(user_id, [])
        if not results or idx >= len(results):
            bot.answer_callback_query(call.id, "‚ùå –†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        selected_rose = results[idx]

        if user_id not in user_favorites:
            user_favorites[user_id] = []

        if any(r.get('–ù–∞–∑–≤–∞–Ω–∏–µ') == selected_rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ') for r in user_favorites[user_id]):
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
        else:
            user_favorites[user_id].append(selected_rose)
            bot.answer_callback_query(call.id, "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
            save_favorite_to_sheet(user_id, call.from_user, selected_rose)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")

def save_favorite_to_sheet(user_id, user, rose):
    try:
        first_name = user.first_name
        username = f"@{user.username}" if user.username else ""
        date = datetime.now().strftime("%Y-%m-%d %H:%M")
        favorite_name = rose.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

        sheet_favorites = gs.open_by_url(SPREADSHEET_URL).worksheet("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
        sheet_favorites.append_row([
            user_id,
            first_name,
            username,
            date,
            favorite_name
        ])
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {favorite_name} (ID: {user_id})")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É: {e}")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
@bot.message_handler(func=lambda m: m.text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
def handle_favorites(message):
    show_favorites(message)

@bot.message_handler(commands=['favorites'])
def handle_favorites_command(message):
    show_favorites(message)

def show_favorites(message):
    user_id = message.from_user.id
    favorites = user_favorites.get(user_id, [])

    if not favorites:
        bot.send_message(message.chat.id, "üíî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–æ–∑.")
        return

    bot.send_message(message.chat.id, "‚≠ê –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã:")

    for idx, rose in enumerate(favorites):
        caption = f"üåπ <b>{rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n–û–ø–∏—Å–∞–Ω–∏–µ: {rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '?')}"
        photo_url = rose.get('photo', 'https://example.com/default.jpg ')
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.row(
            telebot.types.InlineKeyboardButton("ü™¥ –£—Ö–æ–¥", callback_data=f"fav_care_{idx}"),
            telebot.types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"fav_history_{idx}")
        )
        keyboard.add(
            telebot.types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"delete_fav_{idx}")
        )
        bot.send_photo(message.chat.id, photo_url, caption=caption, parse_mode='HTML', reply_markup=keyboard)

# –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_fav_"))
def handle_delete_favorite(call):
    try:
        _, idx = call.data.split("_")
        idx = int(idx)
        user_id = call.from_user.id

        favorites = user_favorites.get(user_id, [])

        if not favorites or idx >= len(favorites):
            bot.answer_callback_query(call.id, "‚ùå –†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        removed_rose = favorites.pop(idx)
        bot.answer_callback_query(call.id, f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {removed_rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")

        delete_favorite_from_sheet(user_id, removed_rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', ''))
        bot.send_message(call.message.chat.id, "üîÑ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:")
        show_favorites(call.message)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")

def delete_favorite_from_sheet(user_id, rose_name):
    try:
        sheet_favorites = gs.open_by_url(SPREADSHEET_URL).worksheet("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
        all_data = sheet_favorites.get_all_values()

        for row_idx, row in enumerate(all_data[1:], start=2):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if str(user_id) == row[0].strip() and rose_name.strip() == row[4].strip():
                sheet_favorites.delete_rows(row_idx)
                logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã: {rose_name} (ID: {user_id})")
                return
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
@bot.callback_query_handler(func=lambda call: call.data.startswith(("fav_care_", "fav_history_")))
def handle_favorite_details(call):
    try:
        action, idx = call.data.split("_")
        idx = int(idx)
        user_id = call.from_user.id

        favorites = user_favorites.get(user_id, [])
        if not favorites or idx >= len(favorites):
            bot.answer_callback_query(call.id, "‚ùå –†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        rose = favorites[idx]
        if action == "fav_care":
            bot.send_message(call.message.chat.id, f"ü™¥ –£—Ö–æ–¥:\n{rose.get('–£—Ö–æ–¥', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        elif action == "fav_history":
            bot.send_message(call.message.chat.id, f"üìú –ò—Å—Ç–æ—Ä–∏—è:\n{rose.get('–ò—Å—Ç–æ—Ä–∏—è', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 8080))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Flask –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host="0.0.0.0", port=port)
