import os
import json
import logging
import telebot
from flask import Flask, request
from google.oauth2.service_account import Credentials
import gspread
import time

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
    CREDS_JSON = json.loads(os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON"))
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
    raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–µ
try:
    creds = Credentials.from_service_account_info(
        CREDS_JSON,
        scopes=["https://www.googleapis.com/auth/spreadsheets"]
    )
    gs = gspread.authorize(creds)
    spreadsheet = gs.open_by_url(SPREADSHEET_URL)
    sheet = spreadsheet.worksheet("List1")
    users_sheet = spreadsheet.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–µ —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
    raise

# –ö—ç—à
cached_roses = []
def refresh_cached_roses():
    global cached_roses
    try:
        cached_roses = sheet.get_all_records()
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–æ–∑ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–æ–∑: {e}")
        cached_roses = []

refresh_cached_roses()

# Flask
app = Flask(__name__)
WEBHOOK_URL = "https://" + os.getenv("RAILWAY_PUBLIC_DOMAIN")
try:
    bot.remove_webhook()
    bot.set_webhook(url=f"{WEBHOOK_URL}/telegram")
    logger.info(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/telegram")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

@app.route('/')
def index():
    return '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'

@app.route('/telegram', methods=['POST'])
def telegram_webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return '', 200

# –ö–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        users_sheet.append_row([
            str(message.from_user.id),
            message.from_user.first_name or "",
            message.from_user.username or "",
            time.strftime("%Y-%m-%d %H:%M:%S"),
            ""  # –ø–æ–∫–∞ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞
        ])
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üîé –ü–æ–∏—Å–∫", "üìû –°–≤—è–∑–∞—Ç—å—Å—è")
    markup.row("üì¶ –ó–∞–∫–∞–∑–∞—Ç—å")
    bot.send_message(
        message.chat.id,
        "üåπ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='HTML',
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: True)
def handle_all_messages(message):
    if message.text == "üîé –ü–æ–∏—Å–∫":
        bot.send_message(message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã")
        return
    elif message.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è":
        bot.send_message(message.chat.id, "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @your_username")
        return
    elif message.text == "üì¶ –ó–∞–∫–∞–∑–∞—Ç—å":
        bot.send_message(message.chat.id, "üõí –ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ —Å–æ—Ä—Ç–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤
    try:
        users_sheet.append_row([
            str(message.from_user.id),
            message.from_user.first_name or "",
            message.from_user.username or "",
            time.strftime("%Y-%m-%d %H:%M:%S"),
            message.text
        ])
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    # –ü–æ–∏—Å–∫ —Ä–æ–∑
    query = message.text.strip().lower()
    matches = [r for r in cached_roses if query in r.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '').strip().lower()]

    if not matches:
        bot.send_message(message.chat.id, "‚ùå –†–æ–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    for rose in matches[:5]:
        caption = (
            f"üåπ <b>{rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
            f"{rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '')}\n"
            f"–¶–µ–Ω–∞: {rose.get('price', '?')}"
        )
        photo_url = rose.get('photo', 'https://example.com/default.jpg')
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(
            telebot.types.InlineKeyboardButton("ü™¥ –£—Ö–æ–¥", callback_data=f"care_{rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ')}"),
            telebot.types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history_{rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ')}")
        )
        bot.send_photo(message.chat.id, photo_url, caption=caption, parse_mode='HTML', reply_markup=keyboard)

# Callback: –£—Ö–æ–¥ –∏ –ò—Å—Ç–æ—Ä–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith(("care_", "history_")))
def handle_details(call):
    action, name = call.data.split("_", 1)
    rose = next((r for r in cached_roses if name.lower() in r.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '').lower()), None)
    if not rose:
        bot.answer_callback_query(call.id, "–†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    if action == "care":
        bot.send_message(call.message.chat.id, f"ü™¥ –£—Ö–æ–¥:\n{rose.get('–£—Ö–æ–¥', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
    else:
        bot.send_message(call.message.chat.id, f"üìú –ò—Å—Ç–æ—Ä–∏—è:\n{rose.get('–ò—Å—Ç–æ—Ä–∏—è', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
    bot.answer_callback_query(call.id)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)
