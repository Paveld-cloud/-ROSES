import os
import json
import logging
import datetime
import urllib.parse
import telebot
from flask import Flask, request
import gspread
from google.oauth2.service_account import Credentials

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
CREDS_JSON = json.loads(os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON"))

# Telegram –±–æ—Ç
bot = telebot.TeleBot(BOT_TOKEN)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
creds = Credentials.from_service_account_info(
    CREDS_JSON,
    scopes=["https://www.googleapis.com/auth/spreadsheets"]
)
gs = gspread.authorize(creds)
spreadsheet = gs.open_by_url(SPREADSHEET_URL)
sheet = spreadsheet.worksheet("List1")
users_sheet = spreadsheet.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")

# –ö—ç—à —Ä–æ–∑
cached_roses = []
def refresh_cached_roses():
    global cached_roses
    try:
        cached_roses = sheet.get_all_records()
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–æ–∑ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–∑: {e}")
        cached_roses = []

refresh_cached_roses()

# Flask
app = Flask(__name__)
WEBHOOK_URL = "https://" + os.getenv("RAILWAY_PUBLIC_DOMAIN")

try:
    bot.remove_webhook()
    bot.set_webhook(url=f"{WEBHOOK_URL}/telegram")
    logger.info(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/telegram")
except Exception as e:
    logger.error(f"‚ùå Webhook –æ—à–∏–±–∫–∞: {e}")

@app.route('/')
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/telegram', methods=['POST'])
def telegram_webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "", 200

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def normalize(text):
    return text.replace('"', '').replace("¬´", "").replace("¬ª", "").lower().strip()

def save_user(message, query=None):
    try:
        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        users_sheet.append_row([
            str(message.from_user.id),
            message.from_user.first_name,
            message.from_user.username or "",
            now,
            query or ""
        ])
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üîé –ü–æ–∏—Å–∫", "üìû –°–≤—è–∑–∞—Ç—å—Å—è")
    markup.row("üì¶ –ó–∞–∫–∞–∑–∞—Ç—å")
    bot.send_message(
        message.chat.id,
        "üåπ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='HTML',
        reply_markup=markup
    )
    save_user(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@bot.message_handler(func=lambda m: m.text == "üîé –ü–æ–∏—Å–∫")
def handle_search(message):
    bot.reply_to(message, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã")

@bot.message_handler(func=lambda m: m.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è")
def handle_contact(message):
    bot.reply_to(message, "üì¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @your_username")

@bot.message_handler(func=lambda m: m.text == "üì¶ –ó–∞–∫–∞–∑–∞—Ç—å")
def handle_order(message):
    bot.reply_to(message, "üõç –ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ —Å–æ—Ä—Ç–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç")

# –ü–æ–∏—Å–∫ —Ä–æ–∑—ã
@bot.message_handler(func=lambda m: m.text and m.text not in ["üîé –ü–æ–∏—Å–∫", "üìû –°–≤—è–∑–∞—Ç—å—Å—è", "üì¶ –ó–∞–∫–∞–∑–∞—Ç—å"])
def find_rose_by_name(message):
    query = message.text.strip().lower()
    save_user(message, query)

    matches = [r for r in cached_roses if normalize(query) in normalize(r.get('–ù–∞–∑–≤–∞–Ω–∏–µ', ''))]

    if not matches:
        bot.send_message(message.chat.id, "‚ùå –†–æ–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    for rose in matches:
        caption = (
            f"üåπ <b>{rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
            f"{rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '')}\n"
            f"–¶–µ–Ω–∞: {rose.get('price', '?')}"
        )
        photo_urls = [url.strip() for url in rose.get("photo", "").split(",") if url.strip()]

        encoded_name = urllib.parse.quote_plus(rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', ''))
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(
            telebot.types.InlineKeyboardButton("ü™¥ –£—Ö–æ–¥", callback_data=f"care_{encoded_name}"),
            telebot.types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history_{encoded_name}")
        )

        if photo_urls:
            media = [telebot.types.InputMediaPhoto(url, caption=caption if i == 0 else "", parse_mode='HTML')
                     for i, url in enumerate(photo_urls)]
            bot.send_media_group(message.chat.id, media)
            bot.send_message(message.chat.id, caption, parse_mode='HTML', reply_markup=keyboard)
        else:
            bot.send_message(message.chat.id, caption, parse_mode='HTML', reply_markup=keyboard)

# –ö–Ω–æ–ø–∫–∏ —É—Ö–æ–¥–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith(("care_", "history_")))
def handle_buttons(call):
    action, encoded_name = call.data.split("_", 1)
    name = urllib.parse.unquote_plus(encoded_name)

    rose = next((r for r in cached_roses if normalize(name) in normalize(r.get('–ù–∞–∑–≤–∞–Ω–∏–µ', ''))), None)
    if not rose:
        bot.answer_callback_query(call.id, "–†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    text = rose.get("–£—Ö–æ–¥" if action == "care" else "–ò—Å—Ç–æ—Ä–∏—è", "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    prefix = "ü™¥ –£—Ö–æ–¥:\n" if action == "care" else "üìú –ò—Å—Ç–æ—Ä–∏—è:\n"
    bot.send_message(call.message.chat.id, prefix + text)
    bot.answer_callback_query(call.id)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))
