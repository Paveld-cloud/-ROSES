import os
import json
import logging
import telebot
from flask import Flask, request
from google.oauth2.service_account import Credentials
import gspread
import time

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
    CREDS_JSON = json.loads(os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON"))
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
    raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
try:
    bot = telebot.TeleBot(BOT_TOKEN)
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    raise

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
try:
    creds = Credentials.from_service_account_info(
        CREDS_JSON,
        scopes=["https://www.googleapis.com/auth/spreadsheets.readonly"]
    )
    gs = gspread.authorize(creds)
    sheet = gs.open_by_url(SPREADSHEET_URL).sheet1
    logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–µ")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google Sheets: {e}")
    raise

# –ö—ç—à –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∑
cached_roses = []
def refresh_cached_roses():
    global cached_roses
    try:
        cached_roses = sheet.get_all_records()
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        cached_roses = []

refresh_cached_roses()

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø–æ–¥ Gunicorn
WEBHOOK_URL = "https://" + os.getenv("RAILWAY_PUBLIC_DOMAIN")
try:
    bot.remove_webhook()
    bot.set_webhook(url=f"{WEBHOOK_URL}/telegram")
    logger.info(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/telegram")
except Exception as e:
    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")

# –ü—Ä–æ—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
@app.route('/')
def index():
    return '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è Webhook Telegram
@app.route('/telegram', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
    bot.process_new_updates([update])
    return '', 200

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤
def setup_handlers():
    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üîé –ü–æ–∏—Å–∫", "üìö –ö–∞—Ç–∞–ª–æ–≥")
        markup.row("üìû –°–≤—è–∑–∞—Ç—å—Å—è", "üì¶ –ó–∞–∫–∞–∑–∞—Ç—å")
        bot.send_message(
            message.chat.id,
            "üåπ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='HTML',
            reply_markup=markup
        )

    @bot.message_handler(func=lambda m: m.text == "üîé –ü–æ–∏—Å–∫")
    def handle_search(message):
        bot.reply_to(message, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã")

    @bot.message_handler(func=lambda m: m.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è")
    def handle_contact(message):
        bot.reply_to(message, "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @your_username")

    @bot.message_handler(func=lambda m: m.text == "üì¶ –ó–∞–∫–∞–∑–∞—Ç—å")
    def handle_order(message):
        bot.reply_to(message, "üõí –ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ —Å–æ—Ä—Ç–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç")

    @bot.message_handler(func=lambda m: m.text == "üìö –ö–∞—Ç–∞–ª–æ–≥")
    def handle_catalog(message):
        keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            telebot.types.InlineKeyboardButton("–ß–∞–π–Ω–æ-–≥–∏–±—Ä–∏–¥–Ω—ã–µ", callback_data="type_–ß–∞–π–Ω–æ-–≥–∏–±—Ä–∏–¥–Ω—ã–µ"),
            telebot.types.InlineKeyboardButton("–ü–ª–µ—Ç–∏—Å—Ç—ã–µ", callback_data="type_–ü–ª–µ—Ç–∏—Å—Ç—ã–µ"),
            telebot.types.InlineKeyboardButton("–ü–æ—á–≤–æ–ø–æ–∫—Ä–æ–≤–Ω—ã–µ", callback_data="type_–ü–æ—á–≤–æ–ø–æ–∫—Ä–æ–≤–Ω—ã–µ"),
            telebot.types.InlineKeyboardButton("–§–ª–æ—Ä–∏–±—É–Ω–¥–∞", callback_data="type_–§–ª–æ—Ä–∏–±—É–Ω–¥–∞")
        )
        bot.send_message(message.chat.id, "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–æ–∑—ã:", reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("type_"))
    def handle_type(call):
        rose_type = call.data.replace("type_", "")
        roses = [r for r in cached_roses if r.get('–¢–∏–ø') == rose_type]
        if not roses:
            bot.answer_callback_query(call.id, "–ù–µ—Ç —Ä–æ–∑ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞")
            return

        for idx, rose in enumerate(roses[:5]):
            caption = (
                f"üåπ <b>{rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n\n"
                f"{rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '')}\n–¶–µ–Ω–∞: {rose.get('price', '?')} —Ä—É–±"
            )
            photo_url = rose.get('photo', 'https://example.com/default.jpg')
            keyboard = telebot.types.InlineKeyboardMarkup()
            keyboard.add(
                telebot.types.InlineKeyboardButton("ü™¥ –£—Ö–æ–¥", callback_data=f"care_{idx}_{rose_type}"),
                telebot.types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history_{idx}_{rose_type}")
            )
            bot.send_photo(call.message.chat.id, photo_url, caption=caption, parse_mode='HTML', reply_markup=keyboard)
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith(("care_", "history_")))
    def handle_rose_details(call):
        action, idx, rose_type = call.data.split("_")
        idx = int(idx)
        filtered_roses = [r for r in cached_roses if r.get('–¢–∏–ø') == rose_type]
        if idx >= len(filtered_roses):
            bot.answer_callback_query(call.id, "–†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        rose = filtered_roses[idx]
        if action == "care":
            bot.send_message(call.message.chat.id, f"ü™¥ –£—Ö–æ–¥:\n{rose.get('–£—Ö–æ–¥', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        else:
            bot.send_message(call.message.chat.id, f"üìú –ò—Å—Ç–æ—Ä–∏—è:\n{rose.get('–ò—Å—Ç–æ—Ä–∏—è', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
setup_handlers()

# –ó–∞–ø—É—Å–∫ –ø–æ–¥ gunicorn, main –±–ª–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
if __name__ == '__main__':
    port = int(os.environ.get("PORT", 8080))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Flask –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host="0.0.0.0", port=port)
