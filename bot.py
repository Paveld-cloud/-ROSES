# bot.py
import os
import json
import logging
import telebot
from flask import Flask, request
from datetime import datetime
from google.oauth2.service_account import Credentials
import gspread
import urllib.parse

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ =====
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_env_var(name):
    value = os.getenv(name)
    if not value:
        logger.error(f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {name}")
        raise RuntimeError(f"–û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {name}")
    return value

BOT_TOKEN = get_env_var("BOT_TOKEN")
SPREADSHEET_URL = get_env_var("SPREADSHEET_URL")
CREDS_JSON = json.loads(get_env_var("GOOGLE_APPLICATION_CREDENTIALS_JSON"))

bot = telebot.TeleBot(BOT_TOKEN)

# ===== –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets =====
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–Ω –ª–∏—à–Ω–∏–π –ø—Ä–æ–±–µ–ª –≤ scope
creds = Credentials.from_service_account_info(CREDS_JSON, scopes=["https://www.googleapis.com/auth/spreadsheets"])
gs = gspread.authorize(creds)
spreadsheet = gs.open_by_url(SPREADSHEET_URL)
sheet_roses = spreadsheet.sheet1
sheet_users = spreadsheet.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
sheet_favorites = spreadsheet.worksheet("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")

# ===== –ö—ç—à =====
cached_roses = []
user_search_results = {}
user_favorites = {}

def load_roses():
    global cached_roses
    try:
        cached_roses = sheet_roses.get_all_records()
        logger.info("‚úÖ –†–æ–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–∑: {e}")
        cached_roses = []

def load_favorites():
    try:
        all_rows = sheet_favorites.get_all_records()
        for row in all_rows:
            uid = int(row['ID'])
            rose = {
                "–ù–∞–∑–≤–∞–Ω–∏–µ": row['–ù–∞–∑–≤–∞–Ω–∏–µ'],
                "–û–ø–∏—Å–∞–Ω–∏–µ": row['–û–ø–∏—Å–∞–Ω–∏–µ'],
                "photo": row['photo'],
                "–£—Ö–æ–¥": row['–£—Ö–æ–¥'],
                "–ò—Å—Ç–æ—Ä–∏—è": row['–ò—Å—Ç–æ—Ä–∏—è']
            }
            user_favorites.setdefault(uid, []).append(rose)
        logger.info("‚úÖ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")

load_roses()
load_favorites()

# ===== Flask –∏ Webhook =====
app = Flask(__name__)
WEBHOOK_URL = f"https://{os.getenv('RAILWAY_PUBLIC_DOMAIN')}/telegram"
bot.remove_webhook()
bot.set_webhook(url=WEBHOOK_URL)

@app.route("/")
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"

@app.route("/telegram", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "", 200

# ===== –ö–æ–º–∞–Ω–¥—ã =====
@bot.message_handler(commands=["start"])
def start(message):
    try:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üîé –ü–æ–∏—Å–∫")
        markup.row("üìû –°–≤—è–∑–∞—Ç—å—Å—è", "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
        bot.send_message(message.chat.id, "üåπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã –¥–ª—è –ø–æ–∏—Å–∫–∞.", reply_markup=markup)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ start: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda m: m.text == "üîé –ü–æ–∏—Å–∫")
def prompt_search(message):
    try:
        bot.send_message(message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã:")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ prompt_search: {e}")

@bot.message_handler(func=lambda m: m.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è")
def contact(message):
    try:
        bot.send_message(message.chat.id, "üìû –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @your_support")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ contact: {e}")

@bot.message_handler(func=lambda m: m.text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
def show_favorites(message):
    try:
        user_id = message.from_user.id
        roses = user_favorites.get(user_id, [])
        if not roses:
            bot.send_message(message.chat.id, "üíî –£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–æ–∑.")
            return
        for rose in roses:
            send_rose_card(message.chat.id, rose, from_favorites=True)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_favorites: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")

# ===== –ü–æ–∏—Å–∫ =====
@bot.message_handler(func=lambda m: True)
def handle_query(message):
    try:
        text = message.text.strip().lower()
        if not text or text.startswith("/"):
            return
        results = [r for r in cached_roses if text in r["–ù–∞–∑–≤–∞–Ω–∏–µ"].lower()]
        if not results:
            bot.send_message(message.chat.id, "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
        user_search_results[message.from_user.id] = results[:10]
        for idx, rose in enumerate(results[:5]):
            send_rose_card(message.chat.id, rose, message.from_user.id, idx)
            log_search(message, rose["–ù–∞–∑–≤–∞–Ω–∏–µ"])
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_query: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")

def send_rose_card(chat_id, rose, user_id=None, idx=None, from_favorites=False):
    try:
        caption = f"üåπ <b>{rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ')}</b>\n–û–ø–∏—Å–∞–Ω–∏–µ: {rose.get('–û–ø–∏—Å–∞–Ω–∏–µ')}"
        photo = rose.get("photo")
        markup = telebot.types.InlineKeyboardMarkup()
        if from_favorites:
            name_encoded = urllib.parse.quote_plus(rose.get("–ù–∞–∑–≤–∞–Ω–∏–µ", ""))
            markup.row(
                telebot.types.InlineKeyboardButton("ü™¥ –£—Ö–æ–¥", callback_data=f"showcare_{name_encoded}"),
                telebot.types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"showhist_{name_encoded}")
            )
        else:
            markup.row(
                telebot.types.InlineKeyboardButton("ü™¥ –£—Ö–æ–¥", callback_data=f"care_{user_id}_{idx}"),
                telebot.types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"hist_{user_id}_{idx}")
            )
            markup.add(
                telebot.types.InlineKeyboardButton("‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_{user_id}_{idx}")
            )
        if photo:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ photo - –≤–∞–ª–∏–¥–Ω—ã–π URL
            if isinstance(photo, str) and (photo.startswith('http://') or photo.startswith('https://')):
                bot.send_photo(chat_id, photo, caption=caption, parse_mode="HTML", reply_markup=markup)
            else:
                bot.send_message(chat_id, caption, parse_mode="HTML", reply_markup=markup)
        else:
            bot.send_message(chat_id, caption, parse_mode="HTML", reply_markup=markup)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_rose_card: {e}")
        try:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–æ–∑—ã.")
        except:
            pass

def log_search(message, rose_name):
    try:
        sheet_users.append_row([
            message.from_user.id,
            message.from_user.first_name,
            f"@{message.from_user.username}" if message.from_user.username else "",
            datetime.now().strftime("%Y-%m-%d %H:%M"),
            rose_name
        ])
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–∏—Å–∫–∞: {e}")

# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ =====
@bot.callback_query_handler(func=lambda c: c.data.startswith("care_") or c.data.startswith("hist_"))
def handle_info(call):
    try:
        _, uid, idx = call.data.split("_")
        user_results = user_search_results.get(int(uid), [])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞
        if int(idx) >= len(user_results):
            bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
            return
            
        rose = user_results[int(idx)]
        if "care" in call.data:
            bot.send_message(call.message.chat.id, f"ü™¥ –£—Ö–æ–¥:\n{rose.get('–£—Ö–æ–¥', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
        else:
            bot.send_message(call.message.chat.id, f"üìú –ò—Å—Ç–æ—Ä–∏—è:\n{rose.get('–ò—Å—Ç–æ—Ä–∏—è', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_info: {e}")
        try:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        except:
            pass

@bot.callback_query_handler(func=lambda c: c.data.startswith("fav_"))
def handle_favorite(call):
    try:
        _, uid, idx = call.data.split("_")
        user_id = int(uid)
        user_results = user_search_results.get(user_id, [])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞
        if int(idx) >= len(user_results):
            bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
            return
            
        rose = user_results[int(idx)]
        if user_id not in user_favorites:
            user_favorites[user_id] = []
        if any(r["–ù–∞–∑–≤–∞–Ω–∏–µ"] == rose["–ù–∞–∑–≤–∞–Ω–∏–µ"] for r in user_favorites[user_id]):
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
            return
        user_favorites[user_id].append(rose)
        try:
            sheet_favorites.append_row([
                user_id,
                call.from_user.first_name,
                f"@{call.from_user.username}" if call.from_user.username else "",
                datetime.now().strftime("%Y-%m-%d %H:%M"),
                rose["–ù–∞–∑–≤–∞–Ω–∏–µ"],
                rose["–û–ø–∏—Å–∞–Ω–∏–µ"],
                rose["photo"],
                rose["–£—Ö–æ–¥"],
                rose["–ò—Å—Ç–æ—Ä–∏—è"]
            ])
            bot.answer_callback_query(call.id, "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_favorite: {e}")
        try:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        except:
            pass

@bot.callback_query_handler(func=lambda c: c.data.startswith("showcare_") or c.data.startswith("showhist_"))
def handle_fav_details(call):
    try:
        prefix, encoded_name = call.data.split("_", 1)
        name = urllib.parse.unquote_plus(encoded_name)
        uid = call.from_user.id
        roses = user_favorites.get(uid, [])
        for rose in roses:
            if rose["–ù–∞–∑–≤–∞–Ω–∏–µ"] == name:
                field = "–£—Ö–æ–¥" if prefix == "showcare" else "–ò—Å—Ç–æ—Ä–∏—è"
                bot.send_message(call.message.chat.id, f"{'ü™¥' if field == '–£—Ö–æ–¥' else 'üìú'} {field}:\n{rose.get(field, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
                return
        bot.answer_callback_query(call.id, "‚ùå –†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        try:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        except:
            pass

# ===== –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) =====
def cleanup_old_search_results():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏"""
    # –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—á–∏—Å—Ç–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø–∏—Å–µ–π
    pass

# ===== –ó–∞–ø—É—Å–∫ =====
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host="0.0.0.0", port=port)
