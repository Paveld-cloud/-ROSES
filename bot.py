# bot.py
import os
import json
import logging
import telebot
from flask import Flask, request, render_template, send_from_directory
from datetime import datetime
from google.oauth2.service_account import Credentials
import gspread
import urllib.parse
import hashlib

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ =====
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_env_var(name):
    value = os.getenv(name)
    if not value:
        logger.error(f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {name}")
        raise RuntimeError(f"–û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {name}")
    return value

BOT_TOKEN = get_env_var("BOT_TOKEN")
SPREADSHEET_URL = get_env_var("SPREADSHEET_URL")
CREDS_JSON = json.loads(get_env_var("GOOGLE_APPLICATION_CREDENTIALS_JSON"))

bot = telebot.TeleBot(BOT_TOKEN)

# ===== –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets =====
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–Ω –ª–∏—à–Ω–∏–π –ø—Ä–æ–±–µ–ª –≤ scope
creds = Credentials.from_service_account_info(CREDS_JSON, scopes=["https://www.googleapis.com/auth/spreadsheets"])
gs = gspread.authorize(creds)
spreadsheet = gs.open_by_url(SPREADSHEET_URL)
sheet_roses = spreadsheet.sheet1
sheet_users = spreadsheet.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
sheet_favorites = spreadsheet.worksheet("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")

# ===== –ö—ç—à =====
cached_roses = []
user_search_results = {}
user_favorites = {}
user_last_info_messages = {}
rose_name_hashes = {}
user_search_result_messages = {}

# ===== –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è) =====
def load_roses():
    global cached_roses
    try:
        cached_roses = sheet_roses.get_all_records()
        logger.info("‚úÖ –†–æ–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–æ–∑: {len(cached_roses)}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–∑: {e}")
        cached_roses = []

def load_favorites():
    try:
        all_rows = sheet_favorites.get_all_records()
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {len(all_rows)}")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_favorites.clear()
        
        for row in all_rows:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if str(row.get('ID', '')).lower().strip() in ['id', 'user_id', '']:
                    continue
                    
                uid = int(row['ID'])
                rose = {
                    "–ù–∞–∑–≤–∞–Ω–∏–µ": str(row.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '')).strip() if row.get('–ù–∞–∑–≤–∞–Ω–∏–µ') else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                    "–û–ø–∏—Å–∞–Ω–∏–µ": str(row.get('–û–ø–∏—Å–∞–Ω–∏–µ', '')).strip() if row.get('–û–ø–∏—Å–∞–Ω–∏–µ') else '',
                    "photo": str(row.get('photo', '')).strip() if row.get('photo') else '',
                    "–£—Ö–æ–¥": str(row.get('–£—Ö–æ–¥', '')).strip() if row.get('–£—Ö–æ–¥') else '',
                    "–ò—Å—Ç–æ—Ä–∏—è": str(row.get('–ò—Å—Ç–æ—Ä–∏—è', '')).strip() if row.get('–ò—Å—Ç–æ—Ä–∏—è') else ''
                }
                user_favorites.setdefault(uid, []).append(rose)
            except Exception as row_error:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {row_error}")
                continue
                
        logger.info("‚úÖ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {list(user_favorites.keys())}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")

# ===== –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ =====
load_roses()
load_favorites()

# ===== Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ =====
app = Flask(__name__, 
           template_folder='templates',
           static_folder='static')

# URL –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
DOMAIN = os.getenv('RAILWAY_PUBLIC_DOMAIN')
if DOMAIN:
    WEB_APP_URL = f"https://{DOMAIN}/app"
    WEBHOOK_URL = f"https://{DOMAIN}/telegram"
else:
    WEB_APP_URL = "https://your-app-url.railway.app/app"
    WEBHOOK_URL = "https://your-app-url.railway.app/telegram"

try:
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

# ===== –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è =====
@app.route("/")
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"

@app.route("/app")
def web_app():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - —Ç–æ–ª—å–∫–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    return render_template('favorites.html')

@app.route("/app/favorites/<int:user_id>")
def get_user_favorites(user_id):
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–æ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logger.info(f"üì• –ó–∞–ø—Ä–æ—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        logger.info(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º: {list(user_favorites.keys())}")
        
        favorites = user_favorites.get(user_id, [])
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–æ–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(favorites)}")
        
        favorites_data = []
        for rose in favorites:
            favorites_data.append({
                'name': str(rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '')).strip(),
                'description': str(rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '')).strip(),
                'photo': str(rose.get('photo', '')).strip(),
                'care': str(rose.get('–£—Ö–æ–¥', '')).strip(),
                'history': str(rose.get('–ò—Å—Ç–æ—Ä–∏—è', '')).strip()
            })
        return {'favorites': favorites_data, 'count': len(favorites_data)}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API /app/favorites/{user_id}: {e}")
        return {'error': str(e)}, 500

@app.route("/static/<path:path>")
def send_static(path):
    return send_from_directory('static', path)

@app.route("/telegram", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "", 200

# ===== –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π =====
def get_rose_hash(rose_name):
    hash_object = hashlib.md5(str(rose_name).encode())
    hash_hex = hash_object.hexdigest()[:10]
    rose_name_hashes[hash_hex] = rose_name
    return hash_hex

def get_rose_name_by_hash(hash_key):
    return rose_name_hashes.get(hash_key, "")

def delete_user_search_results(user_id, chat_id):
    if user_id in user_search_result_messages:
        for msg_id in user_search_result_messages[user_id]:
            try:
                bot.delete_message(chat_id, msg_id)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ {msg_id}: {e}")
        del user_search_result_messages[user_id]
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

def delete_previous_info_message(user_id, chat_id):
    if user_id in user_last_info_messages:
        try:
            msg_id = user_last_info_messages[user_id]
            bot.delete_message(chat_id, msg_id)
            del user_last_info_messages[user_id]
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            if user_id in user_last_info_messages:
                del user_last_info_messages[user_id]

# ===== –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ =====
@bot.message_handler(commands=["start"])
def start(message):
    try:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üîé –ü–æ–∏—Å–∫")
        markup.row("üìû –°–≤—è–∑–∞—Ç—å—Å—è", "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        web_app_btn = telebot.types.KeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", web_app=telebot.types.WebAppInfo(WEB_APP_URL))
        markup.add(web_app_btn)
        
        bot.send_message(message.chat.id, 
                        "üåπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
                        reply_markup=markup)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ start: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(commands=["app"])
def open_app(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        bot.send_message(message.chat.id, 
                        "üì± –û—Ç–∫—Ä—ã–≤–∞—é –∏–∑–±—Ä–∞–Ω–Ω–æ–µ...",
                        reply_markup=telebot.types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                            telebot.types.KeyboardButton("‚≠ê –û—Ç–∫—Ä—ã—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", web_app=telebot.types.WebAppInfo(WEB_APP_URL))
                        ))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ open_app: {e}")

@bot.message_handler(func=lambda m: m.text == "üîé –ü–æ–∏—Å–∫")
def prompt_search(message):
    try:
        bot.send_message(message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã:")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ prompt_search: {e}")

@bot.message_handler(func=lambda m: m.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è")
def contact(message):
    try:
        bot.send_message(message.chat.id, "üìû –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @your_support")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ contact: {e}")

@bot.message_handler(func=lambda m: m.text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
def show_favorites(message):
    try:
        logger.info(f"üì• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        delete_user_search_results(user_id, chat_id)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        delete_previous_info_message(user_id, chat_id)
        
        roses = user_favorites.get(user_id, [])
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–æ–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(roses)}")
        
        if not roses:
            bot.send_message(message.chat.id, "üíî –£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–æ–∑.")
            return
            
        bot.send_message(message.chat.id, f"‚≠ê –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã ({len(roses)} —à—Ç.):")
        
        for i, rose in enumerate(roses):
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–∑—ã {i+1}: {rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            send_rose_card(message.chat.id, rose, from_favorites=True)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_favorites –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")

# ===== –ü–æ–∏—Å–∫ =====
@bot.message_handler(func=lambda m: True)
def handle_query(message):
    try:
        text = message.text.strip().lower()
        if not text or text.startswith("/"):
            return
        results = [r for r in cached_roses if text in str(r.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "")).lower()]
        if not results:
            bot.send_message(message.chat.id, "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
            
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
        user_search_results[user_id] = results[:10]
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∏—Å–∫–∞
        if user_id not in user_search_result_messages:
            user_search_result_messages[user_id] = []
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        result_msg = bot.send_message(chat_id, f"üîç –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results[:5])}")
        user_search_result_messages[user_id].append(result_msg.message_id)
        
        for idx, rose in enumerate(results[:5]):
            msg_id = send_rose_card(message.chat.id, rose, message.from_user.id, idx)
            if msg_id:
                user_search_result_messages[user_id].append(msg_id)
                
        log_search(message, results[0]["–ù–∞–∑–≤–∞–Ω–∏–µ"])
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_query: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")

def send_rose_card(chat_id, rose, user_id=None, idx=None, from_favorites=False):
    try:
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–æ–∑—ã: {rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
        caption = f"üåπ <b>{str(rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')).strip()}</b>\n–û–ø–∏—Å–∞–Ω–∏–µ: {rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}"
        photo = rose.get("photo")
        markup = telebot.types.InlineKeyboardMarkup()
        
        if from_favorites:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—ç—à –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
            rose_hash = get_rose_hash(rose.get("–ù–∞–∑–≤–∞–Ω–∏–µ", ""))
            markup.row(
                telebot.types.InlineKeyboardButton("ü™¥ –£—Ö–æ–¥", callback_data=f"showcare_{rose_hash}"),
                telebot.types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"showhist_{rose_hash}")
            )
        else:
            markup.row(
                telebot.types.InlineKeyboardButton("ü™¥ –£—Ö–æ–¥", callback_data=f"care_{user_id}_{idx}"),
                telebot.types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"hist_{user_id}_{idx}")
            )
            markup.add(
                telebot.types.InlineKeyboardButton("‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_{user_id}_{idx}")
            )
            
        if photo:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ photo - –≤–∞–ª–∏–¥–Ω—ã–π URL
            if isinstance(photo, str) and (photo.startswith('http://') or photo.startswith('https://')):
                logger.info(f"üì∑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ: {photo}")
                msg = bot.send_photo(chat_id, photo, caption=caption, parse_mode="HTML", reply_markup=markup)
                return msg.message_id
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL —Ñ–æ—Ç–æ: {photo}")
                msg = bot.send_message(chat_id, caption, parse_mode="HTML", reply_markup=markup)
                return msg.message_id
        else:
            logger.info("üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ —Ñ–æ—Ç–æ")
            msg = bot.send_message(chat_id, caption, parse_mode="HTML", reply_markup=markup)
            return msg.message_id
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_rose_card: {e}")
        logger.error(f"‚ùå –î–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã: {rose}")
        try:
            error_msg = bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–æ–∑—ã.")
            return error_msg.message_id
        except:
            return None

def log_search(message, rose_name):
    try:
        sheet_users.append_row([
            message.from_user.id,
            message.from_user.first_name,
            f"@{message.from_user.username}" if message.from_user.username else "",
            datetime.now().strftime("%Y-%m-%d %H:%M"),
            str(rose_name).strip()
        ])
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–∏—Å–∫–∞: {e}")

# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ =====
@bot.callback_query_handler(func=lambda c: c.data.startswith("care_") or c.data.startswith("hist_"))
def handle_info(call):
    try:
        _, uid, idx = call.data.split("_")
        user_results = user_search_results.get(int(uid), [])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞
        if int(idx) >= len(user_results):
            bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
            return
            
        rose = user_results[int(idx)]
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        delete_previous_info_message(user_id, chat_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
        if "care" in call.data:  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–æ–ª–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
            info_text = f"ü™¥ –£—Ö–æ–¥:\n{rose.get('–£—Ö–æ–¥', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"
        else:
            info_text = f"üìú –ò—Å—Ç–æ—Ä–∏—è:\n{rose.get('–ò—Å—Ç–æ—Ä–∏—è', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"
            
        info_message = bot.send_message(chat_id, info_text)
        user_last_info_messages[user_id] = info_message.message_id
        
        bot.answer_callback_query(call.id, "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_info: {e}")
        try:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        except:
            pass

@bot.callback_query_handler(func=lambda c: c.data.startswith("fav_"))
def handle_favorite(call):
    try:
        _, uid, idx = call.data.split("_")
        user_id = int(uid)
        user_results = user_search_results.get(user_id, [])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞
        if int(idx) >= len(user_results):
            bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
            return
            
        rose = user_results[int(idx)]
        if user_id not in user_favorites:
            user_favorites[user_id] = []
        if any(str(r.get("–ù–∞–∑–≤–∞–Ω–∏–µ")).strip() == str(rose.get("–ù–∞–∑–≤–∞–Ω–∏–µ")).strip() for r in user_favorites[user_id]):
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
            return
        user_favorites[user_id].append(rose)
        try:
            sheet_favorites.append_row([
                user_id,
                call.from_user.first_name,
                f"@{call.from_user.username}" if call.from_user.username else "",
                datetime.now().strftime("%Y-%m-%d %H:%M"),
                str(rose.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "")).strip(),
                str(rose.get("–û–ø–∏—Å–∞–Ω–∏–µ", "")).strip(),
                str(rose.get("photo", "")).strip(),
                str(rose.get("–£—Ö–æ–¥", "")).strip(),
                str(rose.get("–ò—Å—Ç–æ—Ä–∏—è", "")).strip()
            ])
            bot.answer_callback_query(call.id, "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            load_favorites()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_favorite: {e}")
        try:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        except:
            pass

@bot.callback_query_handler(func=lambda c: c.data.startswith("showcare_") or c.data.startswith("showhist_"))
def handle_fav_details(call):
    try:
        prefix, rose_hash = call.data.split("_", 1)
        rose_name = get_rose_name_by_hash(rose_hash)
        uid = call.from_user.id
        chat_id = call.message.chat.id
        roses = user_favorites.get(uid, [])
        
        logger.info(f"üì• –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}, —Ä–æ–∑–∞ hash: {rose_hash}")
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        delete_previous_info_message(uid, chat_id)
        
        found = False
        for rose in roses:
            if str(rose.get("–ù–∞–∑–≤–∞–Ω–∏–µ")).strip() == str(rose_name).strip():
                field = "–£—Ö–æ–¥" if prefix == "showcare" else "–ò—Å—Ç–æ—Ä–∏—è"
                info_text = f"{'ü™¥' if field == '–£—Ö–æ–¥' else 'üìú'} {field}:\n{rose.get(field, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
                info_message = bot.send_message(chat_id, info_text)
                user_last_info_messages[uid] = info_message.message_id
                
                bot.answer_callback_query(call.id, "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                found = True
                break
                
        if not found:
            bot.answer_callback_query(call.id, "‚ùå –†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
            logger.warning(f"‚ö†Ô∏è –†–æ–∑–∞ —Å hash '{rose_hash}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        try:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        except:
            pass

# ===== –ó–∞–ø—É—Å–∫ =====
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host="0.0.0.0", port=port)
