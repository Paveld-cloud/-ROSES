import os
import json
import logging
import telebot
from flask import Flask, request
from google.oauth2.service_account import Credentials
import gspread
from datetime import datetime

# ========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==========
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ========== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ==========
try:
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
    CREDS_JSON = json.loads(os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON"))
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
    raise

# ========== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ==========
bot = telebot.TeleBot(BOT_TOKEN)
creds = Credentials.from_service_account_info(
    CREDS_JSON,
    scopes=["https://www.googleapis.com/auth/spreadsheets"]
)
gs = gspread.authorize(creds)
spreadsheet = gs.open_by_url(SPREADSHEET_URL)
sheet = spreadsheet.sheet1
users_sheet = spreadsheet.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")

# ========== –ö—ç—à ==========
cached_roses = []
def refresh_cached_roses():
    global cached_roses
    try:
        cached_roses = sheet.get_all_records()
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–æ–∑ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        cached_roses = []

refresh_cached_roses()

# ========== Flask ==========
app = Flask(__name__)
WEBHOOK_URL = "https://" + os.getenv("RAILWAY_PUBLIC_DOMAIN")

try:
    bot.remove_webhook()
    bot.set_webhook(url=f"{WEBHOOK_URL}/telegram")
    logger.info(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/telegram")
except Exception as e:
    logger.error(f"‚ùå Webhook –æ—à–∏–±–∫–∞: {e}")

@app.route('/')
def index():
    return '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'

@app.route('/telegram', methods=['POST'])
def telegram_webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
    bot.process_new_updates([update])
    return '', 200

# ========== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ==========
def save_user_to_sheet(message):
    user_id = message.from_user.id
    name = message.from_user.first_name or ""
    username = message.from_user.username or ""
    date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    users_sheet.append_row([str(user_id), name, username, date, ""])

def save_query_to_sheet(user_id, query):
    try:
        records = users_sheet.get_all_records()
        for i, row in enumerate(records, start=2):  # —Å —É—á—ë—Ç–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            if str(row.get("ID")) == str(user_id):
                old_query = row.get("–ó–∞–ø—Ä–æ—Å", "")
                new_query = (old_query + ", " if old_query else "") + query
                users_sheet.update_cell(i, 5, new_query)
                break
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å: {e}")

# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ==========
@bot.message_handler(commands=['start'])
def start_handler(message):
    save_user_to_sheet(message)
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üîé –ü–æ–∏—Å–∫", "üìû –°–≤—è–∑–∞—Ç—å—Å—è")
    markup.row("üì¶ –ó–∞–∫–∞–∑–∞—Ç—å")
    bot.send_message(
        message.chat.id,
        "üåπ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='HTML',
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == "üîé –ü–æ–∏—Å–∫")
def search_handler(message):
    bot.reply_to(message, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã")

@bot.message_handler(func=lambda m: m.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è")
def contact_handler(message):
    bot.reply_to(message, "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @your_username")

@bot.message_handler(func=lambda m: m.text == "üì¶ –ó–∞–∫–∞–∑–∞—Ç—å")
def order_handler(message):
    bot.reply_to(message, "üõí –ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ —Å–æ—Ä—Ç–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç")

@bot.message_handler(func=lambda m: m.text and m.text not in ["üîé –ü–æ–∏—Å–∫", "üìû –°–≤—è–∑–∞—Ç—å—Å—è", "üì¶ –ó–∞–∫–∞–∑–∞—Ç—å"])
def query_handler(message):
    query = message.text.strip().lower()
    save_query_to_sheet(message.from_user.id, query)
    matches = [r for r in cached_roses if query in r.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '').lower()]

    if not matches:
        bot.send_message(message.chat.id, "üòî –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ä–æ–∑—ã —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.")
        return

    for rose in matches[:5]:
        caption = (
            f"üåπ <b>{rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
            f"{rose.get('–û–ø–∏—Å–∞–Ω–∏–µ', '')}\n"
            f"–¶–µ–Ω–∞: {rose.get('price', '?')}"
        )
        photo_urls = rose.get('photo', '').split(',')  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(
            telebot.types.InlineKeyboardButton("ü™¥ –£—Ö–æ–¥", callback_data=f"care_{rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ')}"),
            telebot.types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history_{rose.get('–ù–∞–∑–≤–∞–Ω–∏–µ')}")
        )
        media_group = []
        for i, url in enumerate(photo_urls[:5]):
            if i == 0:
                bot.send_photo(message.chat.id, url.strip(), caption=caption, parse_mode='HTML', reply_markup=keyboard)
            else:
                bot.send_photo(message.chat.id, url.strip())

@bot.callback_query_handler(func=lambda call: call.data.startswith(("care_", "history_")))
def callback_handler(call):
    action, name = call.data.split("_", 1)
    rose = next((r for r in cached_roses if name.lower() in r.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "").lower()), None)
    if not rose:
        bot.answer_callback_query(call.id, "–†–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    if action == "care":
        bot.send_message(call.message.chat.id, f"ü™¥ –£—Ö–æ–¥:\n{rose.get('–£—Ö–æ–¥', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
    else:
        bot.send_message(call.message.chat.id, f"üìú –ò—Å—Ç–æ—Ä–∏—è:\n{rose.get('–ò—Å—Ç–æ—Ä–∏—è', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
    bot.answer_callback_query(call.id)

# ========== Local –∑–∞–ø—É—Å–∫ ==========
if __name__ == '__main__':
    port = int(os.environ.get("PORT", 8080))
    logger.info(f"üöÄ Flask –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host="0.0.0.0", port=port)

