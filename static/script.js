// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
let tg = window.Telegram.WebApp;
tg.expand();
tg.enableClosingConfirmation();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUserId = null;

// –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
    currentUserId = tg.initDataUnsafe.user.id;
}

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const searchInput = document.getElementById('searchInput');
const searchBtn = document.getElementById('searchBtn');
const rosesList = document.getElementById('rosesList');
const favoritesList = document.getElementById('favoritesList');
const tabBtns = document.querySelectorAll('.tab-btn');
const tabContents = document.querySelectorAll('.tab-content');
const modal = document.getElementById('roseModal');
const modalBody = document.getElementById('modalBody');
const closeBtn = document.querySelector('.close');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.addEventListener('DOMContentLoaded', function() {
    loadRoses();
    
    searchBtn.addEventListener('click', performSearch);
    searchInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            performSearch();
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∫–ª–∞–¥–æ–∫
    tabBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–≤
            tabBtns.forEach(b => b.classList.remove('active'));
            tabContents.forEach(c => c.classList.remove('active'));
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–µ
            btn.classList.add('active');
            document.getElementById(btn.dataset.tab).classList.add('active');
            
            // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            if (btn.dataset.tab === 'favorites') {
                loadFavorites();
            }
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    closeBtn.addEventListener('click', () => {
        modal.style.display = 'none';
    });
    
    window.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.style.display = 'none';
        }
    });
});

// –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async function loadRoses() {
    showLoading(rosesList);
    try {
        const response = await fetch('/app/search');
        const data = await response.json();
        
        if (data.results) {
            displayRoses(data.results, rosesList);
        } else {
            showError(rosesList, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–∑');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showError(rosesList, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
}

async function loadFavorites() {
    if (!currentUserId) {
        showError(favoritesList, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
    }
    
    showLoading(favoritesList);
    try {
        const response = await fetch(`/app/favorites/${currentUserId}`);
        const data = await response.json();
        
        if (data.favorites) {
            displayRoses(data.favorites, favoritesList);
        } else {
            showError(favoritesList, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showError(favoritesList, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
}

function performSearch() {
    const query = searchInput.value.trim();
    showLoading(rosesList);
    
    fetch(`/app/search?q=${encodeURIComponent(query)}`)
        .then(response => response.json())
        .then(data => {
            if (data.results) {
                displayRoses(data.results, rosesList);
            } else {
                showError(rosesList, '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞');
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞:', error);
            showError(rosesList, '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞');
        });
}

// –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function displayRoses(roses, container) {
    if (roses.length === 0) {
        container.innerHTML = '<div class="error">–†–æ–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        return;
    }
    
    container.innerHTML = roses.map(rose => `
        <div class="rose-card">
            ${rose.photo ? `<img src="${rose.photo}" alt="${rose.name}" class="rose-image" onerror="this.style.display='none'">` : ''}
            <div class="rose-info">
                <h3 class="rose-name">${rose.name}</h3>
                <p class="rose-description">${truncateText(rose.description, 100)}</p>
                <div class="rose-actions">
                    <button class="btn btn-care" onclick="showCare('${encodeURIComponent(rose.name)}')">ü™¥ –£—Ö–æ–¥</button>
                    <button class="btn btn-history" onclick="showHistory('${encodeURIComponent(rose.name)}')">üìú –ò—Å—Ç–æ—Ä–∏—è</button>
                    <button class="btn btn-favorite" onclick="addToFavorites('${encodeURIComponent(rose.name)}')">‚≠ê</button>
                </div>
            </div>
        </div>
    `).join('');
}

function showCare(roseName) {
    const name = decodeURIComponent(roseName);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ö–æ–¥–µ
    showModal(`ü™¥ –£—Ö–æ–¥ –∑–∞ "${name}"`, `<p>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ö–æ–¥–µ –∑–∞ —Ä–æ–∑–æ–π "${name}" –±—É–¥–µ—Ç –∑–¥–µ—Å—å.</p>`);
}

function showHistory(roseName) {
    const name = decodeURIComponent(roseName);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏—Å—Ç–æ—Ä–∏–∏
    showModal(`üìú –ò—Å—Ç–æ—Ä–∏—è "${name}"`, `<p>–ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã "${name}" –±—É–¥–µ—Ç –∑–¥–µ—Å—å.</p>`);
}

function addToFavorites(roseName) {
    const name = decodeURIComponent(roseName);
    tg.showAlert(`–†–æ–∑–∞ "${name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!`);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
}

function showModal(title, content) {
    modalBody.innerHTML = `
        <h2>${title}</h2>
        ${content}
    `;
    modal.style.display = 'block';
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showLoading(container) {
    container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
}

function showError(container, message) {
    container.innerHTML = `<div class="error">${message}</div>`;
}

function truncateText(text, maxLength) {
    if (text.length <= maxLength) return text;
    return text.substr(0, maxLength) + '...';
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
window.showCare = showCare;
window.showHistory = showHistory;
window.addToFavorites = addToFavorites;
